{
  "address": "0x80cAC599279d572165289846034DB85854E6c8eD",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "initialOwner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "BandwidthLimitExceeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnforcedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExpectedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FileNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FileSizeTooLarge",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FolderNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "GDVNotEnabled",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientPayment",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientPermissions",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientTokenAllowance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidGDVDiscount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInput",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSubscription",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidTokenPrice",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LinkExpired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LinkNotActive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotFileOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotFolderOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StorageLimitExceeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TokenNotSupported",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TokenTransferFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newDefaultToken",
          "type": "address"
        }
      ],
      "name": "DefaultTokenChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "fileId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "accessor",
          "type": "address"
        }
      ],
      "name": "FileAccessed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "fileId",
          "type": "bytes32"
        }
      ],
      "name": "FileDeleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "fileId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "version",
          "type": "uint16"
        }
      ],
      "name": "FileUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "fileId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "cid",
          "type": "string"
        }
      ],
      "name": "FileUploaded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "folderId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "FolderCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDiscount",
          "type": "uint256"
        }
      ],
      "name": "GDVDiscountUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "GDVEnabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "GDVPaymentReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "GDVTokenSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "linkId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "accessor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "amount",
          "type": "uint128"
        }
      ],
      "name": "PaidAccessCompleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "linkId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "fileId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "price",
          "type": "uint128"
        }
      ],
      "name": "PaidShareLinkCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "amount",
          "type": "uint128"
        }
      ],
      "name": "ReferralRewardPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "amount",
          "type": "uint128"
        }
      ],
      "name": "RevenueWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "linkId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "fileId",
          "type": "bytes32"
        }
      ],
      "name": "ShareLinkCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "tier",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "duration",
          "type": "uint64"
        }
      ],
      "name": "SubscriptionPurchased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "TokenAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokenPaymentReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "TokenPriceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "TokenRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "PaidShareLinks",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "fileId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "pricePerAccess",
          "type": "uint128"
        },
        {
          "internalType": "uint64",
          "name": "expiryDate",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "accessCount",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "maxAccess",
          "type": "uint32"
        },
        {
          "internalType": "string",
          "name": "password",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "linkId",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "password",
          "type": "string"
        }
      ],
      "name": "accessFileViaLink",
      "outputs": [
        {
          "internalType": "string",
          "name": "cid",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "linkId",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "password",
          "type": "string"
        }
      ],
      "name": "accessPaidShareLink",
      "outputs": [
        {
          "internalType": "string",
          "name": "cid",
          "type": "string"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "addPaymentToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bandwidthRatePerGB",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "paramsArray",
          "type": "bytes[]"
        }
      ],
      "name": "batchUploadFiles",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "fileIds",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ethAmount",
          "type": "uint256"
        }
      ],
      "name": "calculateGDVAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "gdvAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ethAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "calculateTokenAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gdvAmount",
          "type": "uint256"
        }
      ],
      "name": "convertGDVToEth",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "parentFolderId",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "isPublic",
          "type": "bool"
        }
      ],
      "name": "createFolder",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "folderId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "fileId",
          "type": "bytes32"
        },
        {
          "internalType": "uint128",
          "name": "pricePerAccess",
          "type": "uint128"
        },
        {
          "internalType": "uint64",
          "name": "expiryDate",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "maxAccess",
          "type": "uint32"
        },
        {
          "internalType": "string",
          "name": "password",
          "type": "string"
        }
      ],
      "name": "createPaidShareLink",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "linkId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "fileId",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "expiryDate",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "maxAccess",
          "type": "uint32"
        },
        {
          "internalType": "string",
          "name": "password",
          "type": "string"
        }
      ],
      "name": "createShareLink",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "linkId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "linkId",
          "type": "bytes32"
        }
      ],
      "name": "deactivatePaidShareLink",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultPaymentToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "fileId",
          "type": "bytes32"
        }
      ],
      "name": "deleteFile",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "earnedRevenue",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "fileExpiryDates",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "fileMetadata",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "fileType",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "filePayments",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "filePermissions",
      "outputs": [
        {
          "internalType": "enum GDrive.Permission",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "fileTypeIndex",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "files",
      "outputs": [
        {
          "internalType": "string",
          "name": "cid",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "size",
          "type": "uint128"
        },
        {
          "internalType": "uint64",
          "name": "uploadDate",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "downloadCount",
          "type": "uint32"
        },
        {
          "internalType": "uint16",
          "name": "version",
          "type": "uint16"
        },
        {
          "internalType": "bool",
          "name": "isEncrypted",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isPublic",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "folderFiles",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "folderPermissions",
      "outputs": [
        {
          "internalType": "enum GDrive.Permission",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "folderSubFolders",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "folders",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "parentFolderId",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "createdDate",
          "type": "uint64"
        },
        {
          "internalType": "bool",
          "name": "isPublic",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gdvDiscount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gdvEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gdvToken",
      "outputs": [
        {
          "internalType": "contract IGDVToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "fileId",
          "type": "bytes32"
        }
      ],
      "name": "getFileDetails",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "fileType",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "cid",
          "type": "string"
        },
        {
          "internalType": "uint128",
          "name": "size",
          "type": "uint128"
        },
        {
          "internalType": "uint64",
          "name": "uploadDate",
          "type": "uint64"
        },
        {
          "internalType": "bool",
          "name": "isEncrypted",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "uint64",
          "name": "expiryDate",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "downloadCount",
          "type": "uint32"
        },
        {
          "internalType": "uint16",
          "name": "version",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "cid",
          "type": "string"
        }
      ],
      "name": "getFileIdByCid",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "linkId",
          "type": "bytes32"
        }
      ],
      "name": "getPaidShareLink",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "fileId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "pricePerAccess",
          "type": "uint128"
        },
        {
          "internalType": "uint64",
          "name": "expiryDate",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "accessCount",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "maxAccess",
          "type": "uint32"
        },
        {
          "internalType": "string",
          "name": "password",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSubscriptionTiers",
      "outputs": [
        {
          "internalType": "uint128[4]",
          "name": "storageLimits",
          "type": "uint128[4]"
        },
        {
          "internalType": "uint128[4]",
          "name": "bandwidthLimits",
          "type": "uint128[4]"
        },
        {
          "internalType": "uint128[4]",
          "name": "prices",
          "type": "uint128[4]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserFiles",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "fileIds",
          "type": "bytes32[]"
        },
        {
          "internalType": "string[]",
          "name": "names",
          "type": "string[]"
        },
        {
          "internalType": "string[]",
          "name": "cids",
          "type": "string[]"
        },
        {
          "internalType": "uint128[]",
          "name": "sizes",
          "type": "uint128[]"
        },
        {
          "internalType": "uint64[]",
          "name": "uploadDates",
          "type": "uint64[]"
        },
        {
          "internalType": "bool[]",
          "name": "isPublics",
          "type": "bool[]"
        },
        {
          "internalType": "string[]",
          "name": "fileTypes",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserStats",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "storageUsed",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "storageLimit",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "bandwidthUsed",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "bandwidthLimit",
          "type": "uint128"
        },
        {
          "internalType": "uint256",
          "name": "fileCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "folderCount",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "tier",
          "type": "uint8"
        },
        {
          "internalType": "uint64",
          "name": "expiryDate",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastBandwidthReset",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxFileSize",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumStoragePeriod",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "publicFiles",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "publicFolders",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "tier",
          "type": "uint8"
        },
        {
          "internalType": "uint64",
          "name": "duration",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        }
      ],
      "name": "purchaseSubscription",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "tier",
          "type": "uint8"
        },
        {
          "internalType": "uint64",
          "name": "duration",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        }
      ],
      "name": "purchaseSubscriptionWithGDV",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "tier",
          "type": "uint8"
        },
        {
          "internalType": "uint64",
          "name": "duration",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "purchaseSubscriptionWithToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "referralRewardPercentage",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "referralRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "referrers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "removePaymentToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "fileId",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "additionalPeriod",
          "type": "uint64"
        }
      ],
      "name": "renewFile",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "_rate",
          "type": "uint128"
        }
      ],
      "name": "setBandwidthRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "setDefaultPaymentToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "setGDVEnabled",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "setGDVToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "_rate",
          "type": "uint128"
        }
      ],
      "name": "setStorageRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "shareLinkPasswords",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "shareLinks",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "fileId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "expiryDate",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "accessCount",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "maxAccess",
          "type": "uint32"
        },
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "storageRatePerMBPerYear",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "subscriptions",
      "outputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "storageLimit",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "bandwidthLimit",
          "type": "uint128"
        },
        {
          "internalType": "uint64",
          "name": "expiryDate",
          "type": "uint64"
        },
        {
          "internalType": "uint8",
          "name": "tier",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "isActive",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "supportedTokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "taggedFiles",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tierBandwidthLimits",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tierPrices",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tierStorageLimits",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenPrices",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "fileId",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "newCID",
          "type": "string"
        },
        {
          "internalType": "uint128",
          "name": "newSize",
          "type": "uint128"
        }
      ],
      "name": "updateFileVersion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "discount",
          "type": "uint256"
        }
      ],
      "name": "updateGDVDiscount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "tier",
          "type": "uint8"
        },
        {
          "internalType": "uint128",
          "name": "storageLimit",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "bandwidthLimit",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "price",
          "type": "uint128"
        }
      ],
      "name": "updateTierConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        }
      ],
      "name": "updateTokenPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "params",
          "type": "bytes"
        }
      ],
      "name": "uploadFile",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "fileId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "params",
          "type": "bytes"
        }
      ],
      "name": "uploadFileWithGDV",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "fileId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "params",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "uploadFileWithToken",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "fileId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userBalances",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userBandwidthUsed",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "userCidToFileId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userFiles",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userFolders",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userStorageUsed",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawEarnings",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x0cec199bb9bac5f32bdfe5fcc3a40bf01715f503f80b9ea38da8dbe57d3fdb0b",
  "receipt": {
    "to": null,
    "from": "0xdeFe84043EA9eC2E14747685d7295574b6bFbde7",
    "contractAddress": "0x80cAC599279d572165289846034DB85854E6c8eD",
    "transactionIndex": 137,
    "gasUsed": "5203897",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000001000000000000000000020000000000000000020000000000000000000800000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000001000000000000000008000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000020000000000000000004000000000000000000000000000000000000000000000000",
    "blockHash": "0x86d42dcf6375b35bda01dfce6aaac9d30730427add5608b83b6069c43a68f9f4",
    "transactionHash": "0x0cec199bb9bac5f32bdfe5fcc3a40bf01715f503f80b9ea38da8dbe57d3fdb0b",
    "logs": [
      {
        "transactionIndex": 137,
        "blockNumber": 8547706,
        "transactionHash": "0x0cec199bb9bac5f32bdfe5fcc3a40bf01715f503f80b9ea38da8dbe57d3fdb0b",
        "address": "0x80cAC599279d572165289846034DB85854E6c8eD",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000defe84043ea9ec2e14747685d7295574b6bfbde7"
        ],
        "data": "0x",
        "logIndex": 160,
        "blockHash": "0x86d42dcf6375b35bda01dfce6aaac9d30730427add5608b83b6069c43a68f9f4"
      }
    ],
    "blockNumber": 8547706,
    "cumulativeGasUsed": "20977845",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xdeFe84043EA9eC2E14747685d7295574b6bFbde7"
  ],
  "numDeployments": 3,
  "solcInputHash": "636b8917c45142d973f6d0b14c8a1b4d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BandwidthLimitExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FileNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FileSizeTooLarge\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FolderNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GDVNotEnabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientPayment\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientPermissions\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientTokenAllowance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidGDVDiscount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInput\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSubscription\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokenPrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LinkExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LinkNotActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotFileOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotFolderOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StorageLimitExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenNotSupported\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenTransferFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newDefaultToken\",\"type\":\"address\"}],\"name\":\"DefaultTokenChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"fileId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"accessor\",\"type\":\"address\"}],\"name\":\"FileAccessed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"fileId\",\"type\":\"bytes32\"}],\"name\":\"FileDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"fileId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"version\",\"type\":\"uint16\"}],\"name\":\"FileUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"fileId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"FileUploaded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"folderId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"FolderCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDiscount\",\"type\":\"uint256\"}],\"name\":\"GDVDiscountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"GDVEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"GDVPaymentReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"GDVTokenSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"linkId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"accessor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"PaidAccessCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"linkId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"fileId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"price\",\"type\":\"uint128\"}],\"name\":\"PaidShareLinkCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"ReferralRewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"}],\"name\":\"RevenueWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"linkId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"fileId\",\"type\":\"bytes32\"}],\"name\":\"ShareLinkCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"tier\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"duration\",\"type\":\"uint64\"}],\"name\":\"SubscriptionPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"TokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenPaymentReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"TokenPriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"PaidShareLinks\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"fileId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"pricePerAccess\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"expiryDate\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"accessCount\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maxAccess\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"password\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"linkId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"password\",\"type\":\"string\"}],\"name\":\"accessFileViaLink\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"cid\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"linkId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"password\",\"type\":\"string\"}],\"name\":\"accessPaidShareLink\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"cid\",\"type\":\"string\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"addPaymentToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bandwidthRatePerGB\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"paramsArray\",\"type\":\"bytes[]\"}],\"name\":\"batchUploadFiles\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"fileIds\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"calculateGDVAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"gdvAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"calculateTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gdvAmount\",\"type\":\"uint256\"}],\"name\":\"convertGDVToEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"parentFolderId\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"isPublic\",\"type\":\"bool\"}],\"name\":\"createFolder\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"folderId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"fileId\",\"type\":\"bytes32\"},{\"internalType\":\"uint128\",\"name\":\"pricePerAccess\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"expiryDate\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"maxAccess\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"password\",\"type\":\"string\"}],\"name\":\"createPaidShareLink\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"linkId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"fileId\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"expiryDate\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"maxAccess\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"password\",\"type\":\"string\"}],\"name\":\"createShareLink\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"linkId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"linkId\",\"type\":\"bytes32\"}],\"name\":\"deactivatePaidShareLink\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultPaymentToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"fileId\",\"type\":\"bytes32\"}],\"name\":\"deleteFile\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"earnedRevenue\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"fileExpiryDates\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"fileMetadata\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"fileType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"filePayments\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"filePermissions\",\"outputs\":[{\"internalType\":\"enum GDrive.Permission\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"fileTypeIndex\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"files\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"cid\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"size\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"uploadDate\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"downloadCount\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"version\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"isEncrypted\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isPublic\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"folderFiles\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"folderPermissions\",\"outputs\":[{\"internalType\":\"enum GDrive.Permission\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"folderSubFolders\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"folders\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"parentFolderId\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"createdDate\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isPublic\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gdvDiscount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gdvEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gdvToken\",\"outputs\":[{\"internalType\":\"contract IGDVToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"fileId\",\"type\":\"bytes32\"}],\"name\":\"getFileDetails\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"fileType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"cid\",\"type\":\"string\"},{\"internalType\":\"uint128\",\"name\":\"size\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"uploadDate\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"isEncrypted\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"expiryDate\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"downloadCount\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"version\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"cid\",\"type\":\"string\"}],\"name\":\"getFileIdByCid\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"linkId\",\"type\":\"bytes32\"}],\"name\":\"getPaidShareLink\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"fileId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"pricePerAccess\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"expiryDate\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"accessCount\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maxAccess\",\"type\":\"uint32\"},{\"internalType\":\"string\",\"name\":\"password\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSubscriptionTiers\",\"outputs\":[{\"internalType\":\"uint128[4]\",\"name\":\"storageLimits\",\"type\":\"uint128[4]\"},{\"internalType\":\"uint128[4]\",\"name\":\"bandwidthLimits\",\"type\":\"uint128[4]\"},{\"internalType\":\"uint128[4]\",\"name\":\"prices\",\"type\":\"uint128[4]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserFiles\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"fileIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"string[]\",\"name\":\"names\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"cids\",\"type\":\"string[]\"},{\"internalType\":\"uint128[]\",\"name\":\"sizes\",\"type\":\"uint128[]\"},{\"internalType\":\"uint64[]\",\"name\":\"uploadDates\",\"type\":\"uint64[]\"},{\"internalType\":\"bool[]\",\"name\":\"isPublics\",\"type\":\"bool[]\"},{\"internalType\":\"string[]\",\"name\":\"fileTypes\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserStats\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"storageUsed\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"storageLimit\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"bandwidthUsed\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"bandwidthLimit\",\"type\":\"uint128\"},{\"internalType\":\"uint256\",\"name\":\"fileCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"folderCount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"tier\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"expiryDate\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastBandwidthReset\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxFileSize\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumStoragePeriod\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"publicFiles\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"publicFolders\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"tier\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"duration\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"purchaseSubscription\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"tier\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"duration\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"purchaseSubscriptionWithGDV\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"tier\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"duration\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"purchaseSubscriptionWithToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referralRewardPercentage\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referralRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"removePaymentToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"fileId\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"additionalPeriod\",\"type\":\"uint64\"}],\"name\":\"renewFile\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_rate\",\"type\":\"uint128\"}],\"name\":\"setBandwidthRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"setDefaultPaymentToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setGDVEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"setGDVToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_rate\",\"type\":\"uint128\"}],\"name\":\"setStorageRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"shareLinkPasswords\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"shareLinks\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"fileId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"expiryDate\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"accessCount\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"maxAccess\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"storageRatePerMBPerYear\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"subscriptions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"storageLimit\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"bandwidthLimit\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"expiryDate\",\"type\":\"uint64\"},{\"internalType\":\"uint8\",\"name\":\"tier\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"supportedTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"taggedFiles\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tierBandwidthLimits\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tierPrices\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tierStorageLimits\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"fileId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"newCID\",\"type\":\"string\"},{\"internalType\":\"uint128\",\"name\":\"newSize\",\"type\":\"uint128\"}],\"name\":\"updateFileVersion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"discount\",\"type\":\"uint256\"}],\"name\":\"updateGDVDiscount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"tier\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"storageLimit\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"bandwidthLimit\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"price\",\"type\":\"uint128\"}],\"name\":\"updateTierConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"updateTokenPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"uploadFile\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"fileId\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"uploadFileWithGDV\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"fileId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"uploadFileWithToken\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"fileId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userBalances\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userBandwidthUsed\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"userCidToFileId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userFiles\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userFolders\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userStorageUsed\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawEarnings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"GDrive Team\",\"details\":\"A comprehensive, gas-efficient decentralized storage solution\",\"errors\":{\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"accessFileViaLink(bytes32,string)\":{\"details\":\"Access file through share link (gas optimized)\"},\"addPaymentToken(address,uint256)\":{\"details\":\"Add a new supported payment token\",\"params\":{\"price\":\"Price in wei per token\",\"token\":\"Address of the ERC20 token\"}},\"calculateGDVAmount(uint256)\":{\"details\":\"Calculate GDV amount needed for payment with discount\",\"params\":{\"ethAmount\":\"Amount in wei\"},\"returns\":{\"gdvAmount\":\"Amount of GDV tokens needed\"}},\"calculateTokenAmount(uint256,address)\":{\"details\":\"Calculate token amount needed for payment\",\"params\":{\"ethAmount\":\"Amount in wei\",\"token\":\"Address of the payment token\"},\"returns\":{\"tokenAmount\":\"Amount of tokens needed\"}},\"convertGDVToEth(uint256)\":{\"details\":\"Convert GDV tokens to ETH\",\"params\":{\"gdvAmount\":\"Amount of GDV tokens to convert\"}},\"createFolder(string,bytes32,bool)\":{\"details\":\"Create a new folder (gas optimized)\"},\"createShareLink(bytes32,uint64,uint32,string)\":{\"details\":\"Create a shareable link for a file\"},\"getFileDetails(bytes32)\":{\"details\":\"Get file details with access control\"},\"getSubscriptionTiers()\":{\"details\":\"Get subscription pricing\"},\"getUserFiles(address)\":{\"details\":\"Get user's files for dashboard display\"},\"getUserStats(address)\":{\"details\":\"Get user's storage statistics\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"purchaseSubscription(uint8,uint64,address)\":{\"details\":\"Purchase or upgrade subscription (gas optimized)\"},\"purchaseSubscriptionWithGDV(uint8,uint64,address)\":{\"details\":\"Purchase subscription with GDV payment\",\"params\":{\"duration\":\"Duration in seconds\",\"referrer\":\"Referrer address\",\"tier\":\"Subscription tier\"}},\"purchaseSubscriptionWithToken(uint8,uint64,address,address)\":{\"details\":\"Purchase subscription with token payment\",\"params\":{\"duration\":\"Duration in seconds\",\"referrer\":\"Referrer address\",\"tier\":\"Subscription tier\",\"token\":\"Address of the payment token\"}},\"removePaymentToken(address)\":{\"details\":\"Remove a supported payment token\",\"params\":{\"token\":\"Address of the ERC20 token\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setDefaultPaymentToken(address)\":{\"details\":\"Set default payment token\",\"params\":{\"token\":\"Address of the ERC20 token\"}},\"setGDVEnabled(bool)\":{\"details\":\"Enable/disable GDV payments\",\"params\":{\"enabled\":\"Whether GDV payments should be enabled\"}},\"setGDVToken(address)\":{\"details\":\"Set GDV token address\",\"params\":{\"token\":\"Address of the GDV token contract\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateGDVDiscount(uint256)\":{\"details\":\"Update GDV discount percentage\",\"params\":{\"discount\":\"New discount percentage in basis points\"}},\"updateTokenPrice(address,uint256)\":{\"details\":\"Update token price\",\"params\":{\"newPrice\":\"New price in wei per token\",\"token\":\"Address of the ERC20 token\"}},\"uploadFileWithGDV(bytes)\":{\"details\":\"Upload file with GDV payment\",\"params\":{\"params\":\"Encoded parameters\"}},\"uploadFileWithToken(bytes,address)\":{\"details\":\"Upload file with token payment\",\"params\":{\"params\":\"Encoded parameters\",\"token\":\"Address of the payment token\"}},\"withdrawTokens(address,uint256)\":{\"details\":\"Withdraw tokens from contract\",\"params\":{\"amount\":\"Amount to withdraw\",\"token\":\"Address of the token to withdraw\"}}},\"title\":\"GDrive 2.0 - Gas Optimized Decentralized Storage Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/GDrive.sol\":\"GDrive\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    bool private _paused;\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xb2e5f50762c27fb4b123e3619c3c02bdcba5e515309382e5bfb6f7d6486510bd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"contracts/GDVToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title GDV Token - GDrive's Native Token\\r\\n * @dev ERC20 token with ETH exchange functionality\\r\\n */\\r\\ncontract GDVToken is ERC20, Ownable, ReentrancyGuard {\\r\\n    // Exchange rate (1 ETH = X GDV)\\r\\n    uint256 public exchangeRate;\\r\\n    \\r\\n    // Minimum ETH amount for exchange\\r\\n    uint256 public constant MIN_EXCHANGE_AMOUNT = 0.01 ether;\\r\\n    \\r\\n    // Events\\r\\n    event ExchangeRateUpdated(uint256 newRate);\\r\\n    event TokensPurchased(address indexed buyer, uint256 ethAmount, uint256 tokenAmount);\\r\\n    event TokensSold(address indexed seller, uint256 tokenAmount, uint256 ethAmount);\\r\\n    \\r\\n    // Errors\\r\\n    error InsufficientExchangeAmount();\\r\\n    error ExchangeDisabled();\\r\\n    error InsufficientContractBalance();\\r\\n    \\r\\n    constructor(\\r\\n        address initialOwner,\\r\\n        uint256 initialExchangeRate\\r\\n    ) ERC20(\\\"GDrive Token\\\", \\\"GDV\\\") Ownable(initialOwner) {\\r\\n        exchangeRate = initialExchangeRate;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Update the exchange rate\\r\\n     * @param newRate New exchange rate (1 ETH = X GDV)\\r\\n     */\\r\\n    function updateExchangeRate(uint256 newRate) external onlyOwner {\\r\\n        if (newRate == 0) revert ExchangeDisabled();\\r\\n        exchangeRate = newRate;\\r\\n        emit ExchangeRateUpdated(newRate);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Buy GDV tokens with ETH\\r\\n     */\\r\\n    function buyTokens() external payable nonReentrant {\\r\\n        if (msg.value < MIN_EXCHANGE_AMOUNT) revert InsufficientExchangeAmount();\\r\\n        \\r\\n        uint256 tokenAmount = msg.value * exchangeRate;\\r\\n        _mint(msg.sender, tokenAmount);\\r\\n        \\r\\n        emit TokensPurchased(msg.sender, msg.value, tokenAmount);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Sell GDV tokens for ETH\\r\\n     * @param tokenAmount Amount of GDV tokens to sell\\r\\n     */\\r\\n    function sellTokens(uint256 tokenAmount) external nonReentrant {\\r\\n        if (tokenAmount == 0) revert InsufficientExchangeAmount();\\r\\n        \\r\\n        uint256 ethAmount = tokenAmount / exchangeRate;\\r\\n        if (address(this).balance < ethAmount) revert InsufficientContractBalance();\\r\\n        \\r\\n        _burn(msg.sender, tokenAmount);\\r\\n        payable(msg.sender).transfer(ethAmount);\\r\\n        \\r\\n        emit TokensSold(msg.sender, tokenAmount, ethAmount);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Get the amount of GDV tokens for a given ETH amount\\r\\n     * @param ethAmount Amount of ETH\\r\\n     * @return tokenAmount Amount of GDV tokens\\r\\n     */\\r\\n    function getTokenAmount(uint256 ethAmount) external view returns (uint256 tokenAmount) {\\r\\n        return ethAmount * exchangeRate;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Get the amount of ETH for a given GDV token amount\\r\\n     * @param tokenAmount Amount of GDV tokens\\r\\n     * @return ethAmount Amount of ETH\\r\\n     */\\r\\n    function getEthAmount(uint256 tokenAmount) external view returns (uint256 ethAmount) {\\r\\n        return tokenAmount / exchangeRate;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Withdraw ETH from contract\\r\\n     */\\r\\n    function withdrawEth() external onlyOwner {\\r\\n        payable(owner()).transfer(address(this).balance);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Mint additional tokens (only owner)\\r\\n     * @param to Address to mint tokens to\\r\\n     * @param amount Amount of tokens to mint\\r\\n     */\\r\\n    function mint(address to, uint256 amount) external onlyOwner {\\r\\n        _mint(to, amount);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Burn tokens (only owner)\\r\\n     * @param from Address to burn tokens from\\r\\n     * @param amount Amount of tokens to burn\\r\\n     */\\r\\n    function burn(address from, uint256 amount) external onlyOwner {\\r\\n        _burn(from, amount);\\r\\n    }\\r\\n    \\r\\n    receive() external payable {\\r\\n        // Allow contract to receive ETH\\r\\n    }\\r\\n} \",\"keccak256\":\"0xb0187122a2acd5777e4e09c1046c97108f101a9806f732e44c8a6ef293619d81\",\"license\":\"MIT\"},\"contracts/GDrive.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"./GDVToken.sol\\\";\\r\\n\\r\\n// Interface for GDVToken specific functions\\r\\ninterface IGDVToken is IERC20 {\\r\\n    function getTokenAmount(uint256 ethAmount) external view returns (uint256);\\r\\n    function getEthAmount(uint256 tokenAmount) external view returns (uint256);\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title GDrive 2.0 - Gas Optimized Decentralized Storage Contract\\r\\n * @dev A comprehensive, gas-efficient decentralized storage solution\\r\\n * @author GDrive Team\\r\\n */\\r\\ncontract GDrive is Ownable, ReentrancyGuard, Pausable {\\r\\n    \\r\\n    // ============ STRUCTS (Gas Optimized) ============\\r\\n    \\r\\n    struct File {\\r\\n        string cid;                 // IPFS Content Identifier\\r\\n        address owner;             // File owner (20 bytes)\\r\\n        uint128 size;              // File size in bytes (16 bytes)\\r\\n        uint64 uploadDate;         // Upload timestamp (8 bytes)\\r\\n        uint32 downloadCount;      // Download counter (4 bytes)\\r\\n        uint16 version;            // File version number (2 bytes)\\r\\n        bool isEncrypted;          // Encryption status (1 bit)\\r\\n        bool isPublic;             // Public accessibility (1 bit)\\r\\n        // Total: 32 bytes slot boundary aligned\\r\\n    }\\r\\n\\r\\n    struct PaidShareLink {\\r\\n        bytes32 fileId;\\r\\n        address creator;\\r\\n        uint128 pricePerAccess;\\r\\n        uint64 expiryDate;\\r\\n        uint32 accessCount;\\r\\n        uint32 maxAccess;\\r\\n        string password;\\r\\n        bool isActive;\\r\\n    }\\r\\n    \\r\\n    struct FileMetadata {\\r\\n        string name;               // File name\\r\\n        string fileType;           // MIME type\\r\\n        string description;        // File description\\r\\n        string[] tags;             // File tags for categorization\\r\\n    }\\r\\n    \\r\\n    struct Folder {\\r\\n        string name;               // Folder name\\r\\n        address owner;             // Folder owner (20 bytes)\\r\\n        bytes32 parentFolderId;    // Parent folder ID (32 bytes)\\r\\n        uint64 createdDate;        // Creation timestamp (8 bytes)\\r\\n        bool isPublic;             // Public accessibility (1 bit)\\r\\n        // Separate arrays to avoid dynamic array gas costs in struct\\r\\n    }\\r\\n    \\r\\n    struct ShareLink {\\r\\n        bytes32 fileId;            // File ID (32 bytes)\\r\\n        address creator;           // Link creator (20 bytes)\\r\\n        uint64 expiryDate;         // Link expiration (8 bytes)\\r\\n        uint32 accessCount;        // Access counter (4 bytes)\\r\\n        uint32 maxAccess;          // Maximum access count (4 bytes)\\r\\n        bool isActive;             // Link status (1 bit)\\r\\n        // Password stored separately to save gas\\r\\n    }\\r\\n    \\r\\n    struct Subscription {\\r\\n        address user;              // Subscriber address (20 bytes)\\r\\n        uint128 storageLimit;      // Storage limit in bytes (16 bytes)\\r\\n        uint128 bandwidthLimit;    // Monthly bandwidth limit (16 bytes)\\r\\n        uint64 expiryDate;         // Subscription expiry (8 bytes)\\r\\n        uint8 tier;                // Subscription tier (1 byte)\\r\\n        bool isActive;             // Subscription status (1 bit)\\r\\n        // Total: 64 bytes, 2 slots\\r\\n    }\\r\\n    \\r\\n    // ============ ENUMS ============\\r\\n    \\r\\n    enum Permission { NONE, READ, WRITE, ADMIN }\\r\\n    \\r\\n    // ============ CONSTANTS (Gas Optimization) ============\\r\\n    \\r\\n    uint256 private constant BYTES_PER_MB = 1048576;\\r\\n    uint256 private constant SECONDS_PER_DAY = 86400;\\r\\n    uint256 private constant DAYS_PER_YEAR = 365;\\r\\n    uint256 private constant BASIS_POINTS = 10000;\\r\\n    uint256 private constant FREE_TIER = 0;\\r\\n    uint256 private constant MAX_TIER = 3;\\r\\n    \\r\\n    // ============ PACKED STATE VARIABLES ============\\r\\n    \\r\\n    // Pricing (packed in single slot)\\r\\n    uint128 public storageRatePerMBPerYear = 0.00001 ether;\\r\\n    uint128 public bandwidthRatePerGB = 0.000005 ether;\\r\\n    \\r\\n    // Limits (packed in single slot)\\r\\n    uint128 public maxFileSize = 5 * 1024 * 1024 * 1024; // 5GB\\r\\n    uint64 public minimumStoragePeriod = 30 days;\\r\\n    uint64 public referralRewardPercentage = 1000; // 10% in basis points\\r\\n    \\r\\n    // Counters (packed in single slot)\\r\\n    uint64 private _fileIdCounter;\\r\\n    uint64 private _folderIdCounter;\\r\\n    uint64 private _shareLinkIdCounter;\\r\\n    uint64 private _reserved; // Reserved for future use\\r\\n    \\r\\n    // ============ MAPPINGS ============\\r\\n    \\r\\n    // Core data storage\\r\\n    mapping(bytes32 => File) public files;\\r\\n    mapping(bytes32 => FileMetadata) public fileMetadata;\\r\\n    mapping(bytes32 => Folder) public folders;\\r\\n    mapping(bytes32 => ShareLink) public shareLinks;\\r\\n    mapping(address => Subscription) public subscriptions;\\r\\n    \\r\\n    // User data (use smaller types for gas efficiency)\\r\\n    mapping(address => bytes32[]) public userFiles;\\r\\n    mapping(address => bytes32[]) public userFolders;\\r\\n    mapping(address => uint128) public userStorageUsed;\\r\\n    mapping(address => uint128) public userBandwidthUsed;\\r\\n    mapping(address => uint64) public lastBandwidthReset;\\r\\n    \\r\\n    // Permissions (packed)\\r\\n    mapping(bytes32 => mapping(address => Permission)) public filePermissions;\\r\\n    mapping(bytes32 => mapping(address => Permission)) public folderPermissions;\\r\\n    \\r\\n    // Financial data\\r\\n    mapping(bytes32 => uint128) public filePayments;\\r\\n    mapping(bytes32 => uint64) public fileExpiryDates;\\r\\n    mapping(address => uint128) public userBalances;\\r\\n    \\r\\n    // Folder contents (separate mappings for gas efficiency)\\r\\n    mapping(bytes32 => bytes32[]) public folderSubFolders;\\r\\n    mapping(bytes32 => bytes32[]) public folderFiles;\\r\\n    \\r\\n    // Search indexes (optimized)\\r\\n    mapping(string => bytes32[]) public taggedFiles;\\r\\n    mapping(string => bytes32[]) public fileTypeIndex;\\r\\n    bytes32[] public publicFiles;\\r\\n    bytes32[] public publicFolders;\\r\\n    \\r\\n    // Share links passwords (separate to save gas)\\r\\n    mapping(bytes32 => string) public shareLinkPasswords;\\r\\n\\r\\n    mapping(bytes32 => PaidShareLink) public PaidShareLinks;\\r\\n    mapping(address => uint128) public earnedRevenue;\\r\\n    mapping(address => address) public referrers;\\r\\n    mapping(address => uint256) public referralRewards;\\r\\n    mapping(address => mapping(string => bytes32)) public userCidToFileId;\\r\\n\\r\\n    \\r\\n    // Subscription tiers configuration (use arrays for gas efficiency)\\r\\n    uint128[4] public tierStorageLimits;\\r\\n    uint128[4] public tierBandwidthLimits;\\r\\n    uint128[4] public tierPrices;\\r\\n    \\r\\n    // ============ TOKEN PAYMENT STATE VARIABLES ============\\r\\n    \\r\\n    // Supported payment tokens\\r\\n    mapping(address => bool) public supportedTokens;\\r\\n    // Token prices (in wei/token)\\r\\n    mapping(address => uint256) public tokenPrices;\\r\\n    // Default payment token\\r\\n    address public defaultPaymentToken;\\r\\n    \\r\\n    // ============ TOKEN PAYMENT EVENTS ============\\r\\n    \\r\\n    event TokenAdded(address indexed token, uint256 price);\\r\\n    event TokenRemoved(address indexed token);\\r\\n    event TokenPriceUpdated(address indexed token, uint256 newPrice);\\r\\n    event DefaultTokenChanged(address indexed newDefaultToken);\\r\\n    event TokenPaymentReceived(address indexed token, address indexed from, uint256 amount);\\r\\n    \\r\\n    // ============ TOKEN PAYMENT ERRORS ============\\r\\n    \\r\\n    error TokenNotSupported();\\r\\n    error InvalidTokenPrice();\\r\\n    error TokenTransferFailed();\\r\\n    error InsufficientTokenAllowance();\\r\\n    \\r\\n    // ============ EVENTS (Optimized) ============\\r\\n    \\r\\n    event FileUploaded(bytes32 indexed fileId, address indexed owner, string cid);\\r\\n    event FileUpdated(bytes32 indexed fileId, uint16 version);\\r\\n    event FileDeleted(bytes32 indexed fileId);\\r\\n    event FileAccessed(bytes32 indexed fileId, address indexed accessor);\\r\\n    event ShareLinkCreated(bytes32 indexed linkId, bytes32 indexed fileId);\\r\\n    event FolderCreated(bytes32 indexed folderId, address indexed owner);\\r\\n    event SubscriptionPurchased(address indexed user, uint8 tier, uint64 duration);\\r\\n    event ReferralRewardPaid(address indexed referrer, uint128 amount);\\r\\n\\r\\n    event PaidShareLinkCreated(bytes32 indexed linkId, bytes32 indexed fileId, uint128 price);\\r\\n    event PaidAccessCompleted(bytes32 indexed linkId, address accessor, uint128 amount);\\r\\n    event RevenueWithdrawn(address indexed user, uint128 amount);\\r\\n\\r\\n    // ============ GDV TOKEN INTEGRATION ============\\r\\n    \\r\\n    IGDVToken public gdvToken;\\r\\n    bool public gdvEnabled;\\r\\n    uint256 public gdvDiscount; // Discount percentage in basis points (e.g., 1000 = 10%)\\r\\n    \\r\\n    event GDVTokenSet(address indexed token);\\r\\n    event GDVEnabled(bool enabled);\\r\\n    event GDVDiscountUpdated(uint256 newDiscount);\\r\\n    event GDVPaymentReceived(address indexed from, uint256 amount);\\r\\n    \\r\\n    error GDVNotEnabled();\\r\\n    error InvalidGDVDiscount();\\r\\n    \\r\\n    // ============ MODIFIERS (Gas Optimized) ============\\r\\n    \\r\\n    modifier onlyFileOwner(bytes32 fileId) {\\r\\n        if (files[fileId].owner != msg.sender) revert NotFileOwner();\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    modifier onlyFolderOwner(bytes32 folderId) {\\r\\n        if (folders[folderId].owner != msg.sender) revert NotFolderOwner();\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    modifier hasFilePermission(bytes32 fileId, Permission requiredPermission) {\\r\\n        File storage file = files[fileId];\\r\\n        if (file.owner != msg.sender && \\r\\n            filePermissions[fileId][msg.sender] < requiredPermission && \\r\\n            !file.isPublic) {\\r\\n            revert InsufficientPermissions();\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    modifier fileExists(bytes32 fileId) {\\r\\n        if (files[fileId].uploadDate == 0) revert FileNotFound();\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    modifier folderExists(bytes32 folderId) {\\r\\n        if (folders[folderId].createdDate == 0) revert FolderNotFound();\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    modifier validSubscription(address user) {\\r\\n        Subscription storage sub = subscriptions[user];\\r\\n        if (!sub.isActive || sub.expiryDate <= block.timestamp) {\\r\\n            revert InvalidSubscription();\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n    \\r\\n    // ============ CUSTOM ERRORS (Gas Efficient) ============\\r\\n    \\r\\n    error NotFileOwner();\\r\\n    error NotFolderOwner();\\r\\n    error InsufficientPermissions();\\r\\n    error FileNotFound();\\r\\n    error FolderNotFound();\\r\\n    error InvalidSubscription();\\r\\n    error StorageLimitExceeded();\\r\\n    error BandwidthLimitExceeded();\\r\\n    error FileSizeTooLarge();\\r\\n    error InvalidInput();\\r\\n    error InsufficientPayment();\\r\\n    error LinkExpired();\\r\\n    error LinkNotActive();\\r\\n    \\r\\n    // ============ CONSTRUCTOR ============\\r\\n    \\r\\n    constructor(address initialOwner) Ownable(initialOwner) {\\r\\n        _initializeSubscriptionTiers();\\r\\n        _setupFreeSubscription(initialOwner);\\r\\n    }\\r\\n    \\r\\n    // ============ CORE FUNCTIONS (Gas Optimized) ============\\r\\n    \\r\\n    /**\\r\\n     * @dev Upload a new file to decentralized storage\\r\\n     * @param params Encoded parameters to reduce stack depth\\r\\n     */\\r\\n    function _uploadFile(bytes calldata params) \\r\\n        internal \\r\\n        returns (bytes32 fileId) {\\r\\n        \\r\\n        // Decode parameters\\r\\n        (\\r\\n            string memory name,\\r\\n            string memory fileType,\\r\\n            string memory cid,\\r\\n            uint128 size,\\r\\n            string memory description,\\r\\n            bool isEncrypted,\\r\\n            bool isPublic,\\r\\n            string[] memory tags,\\r\\n            bytes32 folderId,\\r\\n            uint64 storagePeriod\\r\\n        ) = abi.decode(params, (string, string, string, uint128, string, bool, bool, string[], bytes32, uint64));\\r\\n        \\r\\n        // Validation\\r\\n        if (bytes(cid).length == 0) revert InvalidInput();\\r\\n        if (size == 0 || size > maxFileSize) revert FileSizeTooLarge();\\r\\n        if (storagePeriod < minimumStoragePeriod) revert InvalidInput();\\r\\n        \\r\\n        // Check subscription and limits\\r\\n        Subscription storage sub = subscriptions[msg.sender];\\r\\n        if (!sub.isActive || sub.expiryDate <= block.timestamp) {\\r\\n            revert InvalidSubscription();\\r\\n        }\\r\\n        if (userStorageUsed[msg.sender] + size > sub.storageLimit) {\\r\\n            revert StorageLimitExceeded();\\r\\n        }\\r\\n        \\r\\n        // Calculate and check payment\\r\\n        uint256 storageCost = _calculateStorageCost(size, storagePeriod);\\r\\n        if (msg.value < storageCost) revert InsufficientPayment();\\r\\n        \\r\\n        // Generate unique file ID (gas optimized)\\r\\n        unchecked {\\r\\n        ++_fileIdCounter;\\r\\n    }\\r\\n    fileId = keccak256(abi.encodePacked(cid, msg.sender, block.timestamp, _fileIdCounter));\\r\\n\\r\\n    userCidToFileId[msg.sender][cid] = fileId;\\r\\n        // Create file record\\r\\n        files[fileId] = File({\\r\\n            cid: cid,\\r\\n            owner: msg.sender,\\r\\n            size: size,\\r\\n            uploadDate: uint64(block.timestamp),\\r\\n            downloadCount: 0,\\r\\n            version: 1,\\r\\n            isEncrypted: isEncrypted,\\r\\n            isPublic: isPublic\\r\\n        });\\r\\n        \\r\\n        // Store metadata separately\\r\\n        fileMetadata[fileId] = FileMetadata({\\r\\n            name: name,\\r\\n            fileType: fileType,\\r\\n            description: description,\\r\\n            tags: tags\\r\\n        });\\r\\n        \\r\\n        // Update user data\\r\\n        userFiles[msg.sender].push(fileId);\\r\\n        unchecked {\\r\\n            userStorageUsed[msg.sender] += size;\\r\\n        }\\r\\n        \\r\\n        // Add to folder if specified\\r\\n        if (folderId != bytes32(0)) {\\r\\n            folderFiles[folderId].push(fileId);\\r\\n        }\\r\\n        \\r\\n        // Update indexes (gas optimized)\\r\\n        _updateFileIndexes(fileId, fileType, tags, isPublic);\\r\\n        \\r\\n        // Handle payments\\r\\n        filePayments[fileId] = uint128(msg.value);\\r\\n        unchecked {\\r\\n            fileExpiryDates[fileId] = uint64(block.timestamp + storagePeriod);\\r\\n        }\\r\\n        \\r\\n        // Handle referral rewards\\r\\n        _handleReferralReward(uint128(msg.value));\\r\\n        \\r\\n        emit FileUploaded(fileId, msg.sender, cid);\\r\\n        return fileId;\\r\\n    }\\r\\n    function getFileIdByCid(string calldata cid) external view returns (bytes32) {\\r\\n    bytes32 fileId = userCidToFileId[msg.sender][cid];\\r\\n    if (fileId == bytes32(0)) revert FileNotFound();\\r\\n    return fileId;\\r\\n}\\r\\n    function uploadFile(bytes calldata params) \\r\\n        external \\r\\n        payable \\r\\n        nonReentrant \\r\\n        whenNotPaused \\r\\n        returns (bytes32 fileId) {\\r\\n        return _uploadFile(params);\\r\\n    }\\r\\n\\r\\n    function _batchUploadFiles(bytes[] calldata paramsArray) \\r\\n        internal returns (bytes32[] memory fileIds) {\\r\\n        uint256 count = paramsArray.length;\\r\\n        fileIds = new bytes32[](count);\\r\\n        for (uint i = 0; i < count;) {\\r\\n            fileIds[i] = _uploadFile(paramsArray[i]);\\r\\n            unchecked { ++i; }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function batchUploadFiles(bytes[] calldata paramsArray) \\r\\n        external payable nonReentrant whenNotPaused returns (bytes32[] memory fileIds) {\\r\\n        return _batchUploadFiles(paramsArray);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Create a new folder (gas optimized)\\r\\n     */\\r\\n    function createFolder(\\r\\n        string calldata name,\\r\\n        bytes32 parentFolderId,\\r\\n        bool isPublic\\r\\n    ) external validSubscription(msg.sender) returns (bytes32 folderId) {\\r\\n        if (bytes(name).length == 0) revert InvalidInput();\\r\\n        \\r\\n        // Validate parent folder if specified\\r\\n        if (parentFolderId != bytes32(0)) {\\r\\n            if (folders[parentFolderId].createdDate == 0) revert FolderNotFound();\\r\\n            if (folders[parentFolderId].owner != msg.sender &&\\r\\n                folderPermissions[parentFolderId][msg.sender] < Permission.WRITE) {\\r\\n                revert InsufficientPermissions();\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        unchecked {\\r\\n            ++_folderIdCounter;\\r\\n        }\\r\\n        folderId = keccak256(abi.encodePacked(name, msg.sender, block.timestamp, _folderIdCounter));\\r\\n        \\r\\n        folders[folderId] = Folder({\\r\\n            name: name,\\r\\n            owner: msg.sender,\\r\\n            parentFolderId: parentFolderId,\\r\\n            createdDate: uint64(block.timestamp),\\r\\n            isPublic: isPublic\\r\\n        });\\r\\n        \\r\\n        userFolders[msg.sender].push(folderId);\\r\\n        \\r\\n        // Add to parent folder if specified\\r\\n        if (parentFolderId != bytes32(0)) {\\r\\n            folderSubFolders[parentFolderId].push(folderId);\\r\\n        }\\r\\n        \\r\\n        // Add to public index if public\\r\\n        if (isPublic) {\\r\\n            publicFolders.push(folderId);\\r\\n        }\\r\\n        \\r\\n        emit FolderCreated(folderId, msg.sender);\\r\\n        return folderId;\\r\\n    }\\r\\n\\r\\n    function createPaidShareLink(\\r\\n        bytes32 fileId,\\r\\n        uint128 pricePerAccess,\\r\\n        uint64 expiryDate,\\r\\n        uint32 maxAccess,\\r\\n        string calldata password\\r\\n    ) external onlyFileOwner(fileId) fileExists(fileId) returns (bytes32 linkId) {\\r\\n        if (pricePerAccess == 0 || expiryDate <= block.timestamp) revert InvalidInput();\\r\\n\\r\\n        unchecked {++_shareLinkIdCounter;}\\r\\n        linkId = keccak256(abi.encodePacked(fileId, msg.sender, block.timestamp, _shareLinkIdCounter));\\r\\n\\r\\n        PaidShareLinks[linkId] = PaidShareLink({\\r\\n            fileId: fileId,\\r\\n            creator: msg.sender,\\r\\n            pricePerAccess: pricePerAccess,\\r\\n            expiryDate: expiryDate,\\r\\n            accessCount: 0,\\r\\n            maxAccess: maxAccess,\\r\\n            password: password,\\r\\n            isActive: true\\r\\n        });\\r\\n\\r\\n        emit PaidShareLinkCreated(linkId, fileId, pricePerAccess);\\r\\n        return linkId;\\r\\n    }\\r\\n\\r\\n    function accessPaidShareLink(bytes32 linkId, string calldata password)\\r\\n        external payable nonReentrant returns(string memory cid) {\\r\\n            PaidShareLink storage link = PaidShareLinks[linkId];\\r\\n            if(!link.isActive) revert LinkNotActive();\\r\\n            if(link.expiryDate <= block.timestamp) revert LinkNotActive();\\r\\n            if(link.maxAccess != 0 && link.accessCount >= link.maxAccess) revert LinkExpired();\\r\\n\\r\\n            if(bytes(link.password).length > 0 && keccak256(bytes(password)) != keccak256(bytes(link.password))){\\r\\n                revert InsufficientPermissions();\\r\\n            }\\r\\n\\r\\n            if(msg.value < link.pricePerAccess) revert InsufficientPayment();\\r\\n\\r\\n            File storage file = files[link.fileId];\\r\\n            cid = file.cid;\\r\\n\\r\\n            unchecked {\\r\\n                ++link.accessCount;\\r\\n                ++file.downloadCount;\\r\\n            }\\r\\n           address payable creator = payable(link.creator);\\r\\n           uint128 amount = link.pricePerAccess;\\r\\n           creator.transfer(amount);\\r\\n           earnedRevenue[creator] += amount;\\r\\n\\r\\n           emit PaidAccessCompleted(linkId, msg.sender, amount);\\r\\n           emit FileAccessed(link.fileId, msg.sender);\\r\\n\\r\\n        return cid; \\r\\n        }\\r\\n\\r\\n        function deactivatePaidShareLink(bytes32 linkId) external {\\r\\n           PaidShareLink storage link = PaidShareLinks[linkId];\\r\\n           if (link.creator != msg.sender) revert NotFileOwner();\\r\\n           link.isActive = false;\\r\\n        }\\r\\n\\r\\n        function getPaidShareLink(bytes32 linkId)\\r\\n    external view returns (\\r\\n        bytes32 fileId,\\r\\n        address creator,\\r\\n        uint128 pricePerAccess,\\r\\n        uint64 expiryDate,\\r\\n        uint32 accessCount,\\r\\n        uint32 maxAccess,\\r\\n        string memory password,\\r\\n        bool isActive\\r\\n    )\\r\\n{\\r\\n    PaidShareLink storage link = PaidShareLinks[linkId];\\r\\n    return (\\r\\n        link.fileId,\\r\\n        link.creator,\\r\\n        link.pricePerAccess,\\r\\n        link.expiryDate,\\r\\n        link.accessCount,\\r\\n        link.maxAccess,\\r\\n        link.password,\\r\\n        link.isActive\\r\\n    );\\r\\n}\\r\\n\\r\\n    function deleteFile(bytes32 fileId) external onlyFileOwner(fileId) fileExists(fileId){\\r\\n        File storage file = files[fileId];\\r\\n        FileMetadata storage metadata = fileMetadata[fileId];\\r\\n        _removeFromIndexes(fileId, metadata.fileType, metadata.tags, file.isPublic);\\r\\n        if (userStorageUsed[msg.sender] >= file.size){\\r\\n            userStorageUsed[msg.sender] -= file.size;\\r\\n        }\\r\\n        else{\\r\\n            userStorageUsed[msg.sender] = 0;\\r\\n        }\\r\\n\\r\\n        delete files[fileId];\\r\\n        delete fileMetadata[fileId];\\r\\n        delete fileExpiryDates[fileId];\\r\\n        emit FileDeleted(fileId);\\r\\n    }\\r\\n\\r\\n    function _removeFromIndexes(\\r\\n        bytes32 fileId,\\r\\n        string memory fileType,\\r\\n        string[] memory tags,\\r\\n        bool isPublic\\r\\n    ) internal {\\r\\n        // Remove from file type index\\r\\n        bytes32[] storage typeIndex = fileTypeIndex[fileType];\\r\\n        for (uint i = 0; i < typeIndex.length; i++) {\\r\\n            if (typeIndex[i] == fileId) {\\r\\n                typeIndex[i] = typeIndex[typeIndex.length - 1];\\r\\n                typeIndex.pop();\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Remove from tag indexes\\r\\n        for (uint j = 0; j < tags.length; j++) {\\r\\n            bytes32[] storage tagIndex = taggedFiles[tags[j]];\\r\\n            for (uint k = 0; k < tagIndex.length; k++) {\\r\\n                if (tagIndex[k] == fileId) {\\r\\n                    tagIndex[k] = tagIndex[tagIndex.length - 1];\\r\\n                    tagIndex.pop();\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Remove from public files if applicable\\r\\n        if (isPublic) {\\r\\n            bytes32[] storage pubFiles = publicFiles;\\r\\n            for (uint l = 0; l < pubFiles.length; l++) {\\r\\n                if (pubFiles[l] == fileId) {\\r\\n                    pubFiles[l] = pubFiles[pubFiles.length - 1];\\r\\n                    pubFiles.pop();\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function renewFile(bytes32 fileId, uint64 additionalPeriod)\\r\\n        external payable onlyFileOwner(fileId) fileExists(fileId)\\r\\n    {\\r\\n        uint256 renewalCost = _calculateStorageCost(files[fileId].size, additionalPeriod);\\r\\n        if (msg.value < renewalCost) revert InsufficientPayment();\\r\\n\\r\\n        unchecked {\\r\\n            fileExpiryDates[fileId] += additionalPeriod;\\r\\n        }\\r\\n\\r\\n        filePayments[fileId] += uint128(msg.value);\\r\\n    }\\r\\n\\r\\n    function updateFileVersion(bytes32 fileId, string calldata newCID, uint128 newSize)\\r\\n        external onlyFileOwner(fileId) fileExists(fileId)\\r\\n    {\\r\\n        File storage file = files[fileId];\\r\\n        Subscription storage sub = subscriptions[msg.sender];\\r\\n\\r\\n        // Check storage limit\\r\\n        if (userStorageUsed[msg.sender] + newSize - file.size > sub.storageLimit) {\\r\\n            revert StorageLimitExceeded();\\r\\n        }\\r\\n\\r\\n        // Update size and CID\\r\\n        unchecked {\\r\\n            userStorageUsed[msg.sender] += (newSize - file.size);\\r\\n            file.size = newSize;\\r\\n            file.cid = newCID;\\r\\n            ++file.version;\\r\\n        }\\r\\n\\r\\n        emit FileUpdated(fileId, file.version);\\r\\n    }\\r\\n\\r\\n    function withdrawEarnings() external {\\r\\n        uint128 amount = earnedRevenue[msg.sender];\\r\\n        require(amount > 0, \\\"No earnings\\\");\\r\\n        earnedRevenue[msg.sender] = 0;\\r\\n        payable(msg.sender).transfer(amount);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Create a shareable link for a file\\r\\n     */\\r\\n    function createShareLink(\\r\\n        bytes32 fileId,\\r\\n        uint64 expiryDate,\\r\\n        uint32 maxAccess,\\r\\n        string calldata password\\r\\n    ) external hasFilePermission(fileId, Permission.READ) fileExists(fileId) returns (bytes32 linkId) {\\r\\n        if (expiryDate <= block.timestamp) revert InvalidInput();\\r\\n        \\r\\n        unchecked {\\r\\n            ++_shareLinkIdCounter;\\r\\n        }\\r\\n        linkId = keccak256(abi.encodePacked(fileId, msg.sender, block.timestamp, _shareLinkIdCounter));\\r\\n        \\r\\n        shareLinks[linkId] = ShareLink({\\r\\n            fileId: fileId,\\r\\n            creator: msg.sender,\\r\\n            expiryDate: expiryDate,\\r\\n            isActive: true,\\r\\n            accessCount: 0,\\r\\n            maxAccess: maxAccess\\r\\n        });\\r\\n        \\r\\n        if (bytes(password).length > 0) {\\r\\n            shareLinkPasswords[linkId] = password;\\r\\n        }\\r\\n        \\r\\n        emit ShareLinkCreated(linkId, fileId);\\r\\n        return linkId;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Access file through share link (gas optimized)\\r\\n     */\\r\\n    function accessFileViaLink(\\r\\n        bytes32 linkId,\\r\\n        string calldata password\\r\\n    ) external returns (string memory cid) {\\r\\n        ShareLink storage link = shareLinks[linkId];\\r\\n        if (!link.isActive) revert LinkNotActive();\\r\\n        if (link.expiryDate <= block.timestamp) revert LinkExpired();\\r\\n        if (link.maxAccess != 0 && link.accessCount >= link.maxAccess) revert LinkExpired();\\r\\n        \\r\\n        // Check password if required\\r\\n        string storage storedPassword = shareLinkPasswords[linkId];\\r\\n        if (bytes(storedPassword).length > 0) {\\r\\n            if (keccak256(bytes(password)) != keccak256(bytes(storedPassword))) {\\r\\n                revert InsufficientPermissions();\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        bytes32 fileId = link.fileId;\\r\\n        File storage file = files[fileId];\\r\\n        \\r\\n        // Check bandwidth limit\\r\\n        Subscription storage sub = subscriptions[msg.sender];\\r\\n        if (sub.isActive) {\\r\\n            _resetBandwidthIfNeeded(msg.sender);\\r\\n            if (userBandwidthUsed[msg.sender] + file.size > sub.bandwidthLimit) {\\r\\n                revert BandwidthLimitExceeded();\\r\\n            }\\r\\n            unchecked {\\r\\n                userBandwidthUsed[msg.sender] += file.size;\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        // Update counters\\r\\n        unchecked {\\r\\n            ++link.accessCount;\\r\\n            ++file.downloadCount;\\r\\n        }\\r\\n        \\r\\n        emit FileAccessed(fileId, msg.sender);\\r\\n        return file.cid;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Purchase or upgrade subscription (gas optimized)\\r\\n     */\\r\\n    function purchaseSubscription(\\r\\n        uint8 tier,\\r\\n        uint64 duration,\\r\\n        address referrer\\r\\n    ) external payable nonReentrant {\\r\\n        if (tier > MAX_TIER) revert InvalidInput();\\r\\n        if (duration < minimumStoragePeriod) revert InvalidInput();\\r\\n        \\r\\n        uint256 cost = _calculateSubscriptionCost(tier, duration);\\r\\n        if (msg.value < cost) revert InsufficientPayment();\\r\\n        \\r\\n        // Handle referral (only once per user)\\r\\n        if (referrer != address(0) && referrer != msg.sender && referrers[msg.sender] == address(0)) {\\r\\n            referrers[msg.sender] = referrer;\\r\\n        }\\r\\n        \\r\\n        // Update subscription\\r\\n        Subscription storage sub = subscriptions[msg.sender];\\r\\n        if (sub.expiryDate > block.timestamp) {\\r\\n            unchecked {\\r\\n                sub.expiryDate += duration;\\r\\n            }\\r\\n        } else {\\r\\n            unchecked {\\r\\n                sub.expiryDate = uint64(block.timestamp + duration);\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        sub.user = msg.sender;\\r\\n        sub.storageLimit = tierStorageLimits[tier];\\r\\n        sub.bandwidthLimit = tierBandwidthLimits[tier];\\r\\n        sub.tier = tier;\\r\\n        sub.isActive = true;\\r\\n        \\r\\n        // Reset bandwidth tracking\\r\\n        lastBandwidthReset[msg.sender] = uint64(block.timestamp);\\r\\n        userBandwidthUsed[msg.sender] = 0;\\r\\n        \\r\\n        // Handle referral reward\\r\\n        _handleReferralReward(uint128(msg.value));\\r\\n        \\r\\n        emit SubscriptionPurchased(msg.sender, tier, duration);\\r\\n    }\\r\\n    \\r\\n    // ============ VIEW FUNCTIONS (Gas Optimized) ============\\r\\n    \\r\\n    /**\\r\\n     * @dev Get file details with access control\\r\\n     */\\r\\n    function getFileDetails(bytes32 fileId) \\r\\n        external \\r\\n        view \\r\\n        fileExists(fileId) \\r\\n        hasFilePermission(fileId, Permission.READ) \\r\\n        returns (\\r\\n            string memory name,\\r\\n            string memory fileType,\\r\\n            string memory cid,\\r\\n            uint128 size,\\r\\n            uint64 uploadDate,\\r\\n            bool isEncrypted,\\r\\n            address owner,\\r\\n            string memory description,\\r\\n            uint64 expiryDate,\\r\\n            uint32 downloadCount,\\r\\n            uint16 version\\r\\n        ) {\\r\\n        File storage file = files[fileId];\\r\\n        FileMetadata storage metadata = fileMetadata[fileId];\\r\\n        \\r\\n        return (\\r\\n            metadata.name,\\r\\n            metadata.fileType,\\r\\n            file.cid,\\r\\n            file.size,\\r\\n            file.uploadDate,\\r\\n            file.isEncrypted,\\r\\n            file.owner,\\r\\n            metadata.description,\\r\\n            fileExpiryDates[fileId],\\r\\n            file.downloadCount,\\r\\n            file.version\\r\\n        );\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Get user's files for dashboard display\\r\\n     */\\r\\n    function getUserFiles(address user) \\r\\n        external \\r\\n        view \\r\\n        returns (\\r\\n            bytes32[] memory fileIds,\\r\\n            string[] memory names,\\r\\n            string[] memory cids,\\r\\n            uint128[] memory sizes,\\r\\n            uint64[] memory uploadDates,\\r\\n            bool[] memory isPublics,\\r\\n            string[] memory fileTypes\\r\\n        ) {\\r\\n        bytes32[] storage userFileIds = userFiles[user];\\r\\n        uint256 fileCount = userFileIds.length;\\r\\n        \\r\\n        fileIds = new bytes32[](fileCount);\\r\\n        names = new string[](fileCount);\\r\\n        cids = new string[](fileCount);\\r\\n        sizes = new uint128[](fileCount);\\r\\n        uploadDates = new uint64[](fileCount);\\r\\n        isPublics = new bool[](fileCount);\\r\\n        fileTypes = new string[](fileCount);\\r\\n\\r\\n        for (uint256 i = 0; i < fileCount; i++) {\\r\\n            bytes32 fileId = userFileIds[i];\\r\\n            File storage file = files[fileId];\\r\\n            FileMetadata storage metadata = fileMetadata[fileId];\\r\\n            \\r\\n            fileIds[i] = fileId;\\r\\n            names[i] = metadata.name;\\r\\n            cids[i] = file.cid;\\r\\n            sizes[i] = file.size;\\r\\n            uploadDates[i] = file.uploadDate;\\r\\n            isPublics[i] = file.isPublic;\\r\\n            fileTypes[i] = metadata.fileType;\\r\\n        }\\r\\n        \\r\\n        return (fileIds, names, cids, sizes, uploadDates, isPublics, fileTypes);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Get user's storage statistics\\r\\n     */\\r\\n    function getUserStats(address user) external view returns (\\r\\n        uint128 storageUsed,\\r\\n        uint128 storageLimit,\\r\\n        uint128 bandwidthUsed,\\r\\n        uint128 bandwidthLimit,\\r\\n        uint256 fileCount,\\r\\n        uint256 folderCount,\\r\\n        uint8 tier,\\r\\n        uint64 expiryDate\\r\\n    ) {\\r\\n        Subscription storage sub = subscriptions[user];\\r\\n        storageUsed = userStorageUsed[user];\\r\\n        storageLimit = sub.storageLimit;\\r\\n        bandwidthUsed = userBandwidthUsed[user];\\r\\n        bandwidthLimit = sub.bandwidthLimit;\\r\\n        fileCount = userFiles[user].length;\\r\\n        folderCount = userFolders[user].length;\\r\\n        tier = sub.tier;\\r\\n        expiryDate = sub.expiryDate;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Get subscription pricing\\r\\n     */\\r\\n    function getSubscriptionTiers() external view returns (\\r\\n        uint128[4] memory storageLimits,\\r\\n        uint128[4] memory bandwidthLimits,\\r\\n        uint128[4] memory prices\\r\\n    ) {\\r\\n        return (tierStorageLimits, tierBandwidthLimits, tierPrices);\\r\\n    }\\r\\n    \\r\\n    // ============ UTILITY FUNCTIONS (Gas Optimized) ============\\r\\n    \\r\\n    function _calculateStorageCost(uint128 size, uint64 period) internal view returns (uint256) {\\r\\n        unchecked {\\r\\n            uint256 sizeInMB = (size + BYTES_PER_MB - 1) / BYTES_PER_MB; // Round up\\r\\n            uint256 periodInYears = (uint256(period) * 1e18) / (DAYS_PER_YEAR * SECONDS_PER_DAY);\\r\\n            return (sizeInMB * storageRatePerMBPerYear * periodInYears) / 1e18;\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function _calculateSubscriptionCost(uint8 tier, uint64 duration) internal view returns (uint256) {\\r\\n        unchecked {\\r\\n            uint256 monthlyPrice = tierPrices[tier];\\r\\n            uint256 months = (uint256(duration) + 29 days) / 30 days; // Round up\\r\\n            return monthlyPrice * months;\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    // ============ ADMIN FUNCTIONS ============\\r\\n    \\r\\n    function setStorageRate(uint128 _rate) external onlyOwner {\\r\\n        storageRatePerMBPerYear = _rate;\\r\\n    }\\r\\n    \\r\\n    function setBandwidthRate(uint128 _rate) external onlyOwner {\\r\\n        bandwidthRatePerGB = _rate;\\r\\n    }\\r\\n    \\r\\n    function updateTierConfig(\\r\\n        uint8 tier,\\r\\n        uint128 storageLimit,\\r\\n        uint128 bandwidthLimit,\\r\\n        uint128 price\\r\\n    ) external onlyOwner {\\r\\n        if (tier > MAX_TIER) revert InvalidInput();\\r\\n        tierStorageLimits[tier] = storageLimit;\\r\\n        tierBandwidthLimits[tier] = bandwidthLimit;\\r\\n        tierPrices[tier] = price;\\r\\n    }\\r\\n    \\r\\n    function pause() external onlyOwner {\\r\\n        _pause();\\r\\n    }\\r\\n    \\r\\n    function unpause() external onlyOwner {\\r\\n        _unpause();\\r\\n    }\\r\\n    \\r\\n    function emergencyWithdraw() external onlyOwner {\\r\\n        payable(owner()).transfer(address(this).balance);\\r\\n    }\\r\\n    \\r\\n    // ============ INTERNAL FUNCTIONS (Gas Optimized) ============\\r\\n    \\r\\n    function _initializeSubscriptionTiers() internal {\\r\\n        // Free tier\\r\\n        tierStorageLimits[0] = 1024 * 1024 * 1024; // 1GB\\r\\n        tierBandwidthLimits[0] = 10 * 1024 * 1024 * 1024; // 10GB\\r\\n        tierPrices[0] = 0;\\r\\n        \\r\\n        // Basic tier\\r\\n        tierStorageLimits[1] = 100 * 1024 * 1024 * 1024; // 100GB\\r\\n        tierBandwidthLimits[1] = 1000 * 1024 * 1024 * 1024; // 1TB\\r\\n        tierPrices[1] = 0.01 ether;\\r\\n        \\r\\n        // Premium tier\\r\\n        tierStorageLimits[2] = 1000 * 1024 * 1024 * 1024; // 1TB\\r\\n        tierBandwidthLimits[2] = 10000 * 1024 * 1024 * 1024; // 10TB\\r\\n        tierPrices[2] = 0.05 ether;\\r\\n        \\r\\n        // Enterprise tier\\r\\n        tierStorageLimits[3] = 10000 * 1024 * 1024 * 1024; // 10TB\\r\\n        tierBandwidthLimits[3] = 100000 * 1024 * 1024 * 1024; // 100TB\\r\\n        tierPrices[3] = 0.2 ether;\\r\\n    }\\r\\n    \\r\\n    function _setupFreeSubscription(address user) internal {\\r\\n        subscriptions[user] = Subscription({\\r\\n            user: user,\\r\\n            storageLimit: tierStorageLimits[0],\\r\\n            bandwidthLimit: tierBandwidthLimits[0],\\r\\n            expiryDate: uint64(block.timestamp + 365 days),\\r\\n            tier: 0,\\r\\n            isActive: true\\r\\n        });\\r\\n        lastBandwidthReset[user] = uint64(block.timestamp);\\r\\n    }\\r\\n    \\r\\n    function _updateFileIndexes(\\r\\n        bytes32 fileId, \\r\\n        string memory fileType, \\r\\n        string[] memory tags, \\r\\n        bool isPublic\\r\\n    ) internal {\\r\\n        // Add to file type index\\r\\n        fileTypeIndex[fileType].push(fileId);\\r\\n        \\r\\n        // Add to tag indexes\\r\\n        uint256 tagLength = tags.length;\\r\\n        for (uint256 i; i < tagLength;) {\\r\\n            taggedFiles[tags[i]].push(fileId);\\r\\n            unchecked {\\r\\n                ++i;\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        // Add to public files if public\\r\\n        if (isPublic) {\\r\\n            publicFiles.push(fileId);\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function _resetBandwidthIfNeeded(address user) internal {\\r\\n        unchecked {\\r\\n            if (block.timestamp >= lastBandwidthReset[user] + 30 days) {\\r\\n                userBandwidthUsed[user] = 0;\\r\\n                lastBandwidthReset[user] = uint64(block.timestamp);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    function _handleReferralReward(uint128 amount) internal {\\r\\n        address referrer = referrers[msg.sender];\\r\\n        if (referrer != address(0)) {\\r\\n            unchecked {\\r\\n                uint128 reward = uint128((amount * uint128(referralRewardPercentage)) / BASIS_POINTS);\\r\\n                referralRewards[referrer] += reward;\\r\\n                payable(referrer).transfer(reward);\\r\\n                emit ReferralRewardPaid(referrer, reward);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n    \\r\\n    // ============ TOKEN PAYMENT FUNCTIONS ============\\r\\n    \\r\\n    /**\\r\\n     * @dev Add a new supported payment token\\r\\n     * @param token Address of the ERC20 token\\r\\n     * @param price Price in wei per token\\r\\n     */\\r\\n    function addPaymentToken(address token, uint256 price) external onlyOwner {\\r\\n        if (token == address(0)) revert InvalidInput();\\r\\n        if (price == 0) revert InvalidTokenPrice();\\r\\n        \\r\\n        supportedTokens[token] = true;\\r\\n        tokenPrices[token] = price;\\r\\n        \\r\\n        emit TokenAdded(token, price);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Remove a supported payment token\\r\\n     * @param token Address of the ERC20 token\\r\\n     */\\r\\n    function removePaymentToken(address token) external onlyOwner {\\r\\n        if (!supportedTokens[token]) revert TokenNotSupported();\\r\\n        \\r\\n        supportedTokens[token] = false;\\r\\n        tokenPrices[token] = 0;\\r\\n        \\r\\n        if (defaultPaymentToken == token) {\\r\\n            defaultPaymentToken = address(0);\\r\\n        }\\r\\n        \\r\\n        emit TokenRemoved(token);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Update token price\\r\\n     * @param token Address of the ERC20 token\\r\\n     * @param newPrice New price in wei per token\\r\\n     */\\r\\n    function updateTokenPrice(address token, uint256 newPrice) external onlyOwner {\\r\\n        if (!supportedTokens[token]) revert TokenNotSupported();\\r\\n        if (newPrice == 0) revert InvalidTokenPrice();\\r\\n        \\r\\n        tokenPrices[token] = newPrice;\\r\\n        \\r\\n        emit TokenPriceUpdated(token, newPrice);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Set default payment token\\r\\n     * @param token Address of the ERC20 token\\r\\n     */\\r\\n    function setDefaultPaymentToken(address token) external onlyOwner {\\r\\n        if (token != address(0) && !supportedTokens[token]) revert TokenNotSupported();\\r\\n        \\r\\n        defaultPaymentToken = token;\\r\\n        \\r\\n        emit DefaultTokenChanged(token);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Calculate token amount needed for payment\\r\\n     * @param ethAmount Amount in wei\\r\\n     * @param token Address of the payment token\\r\\n     * @return tokenAmount Amount of tokens needed\\r\\n     */\\r\\n    function calculateTokenAmount(uint256 ethAmount, address token) public view returns (uint256 tokenAmount) {\\r\\n        if (!supportedTokens[token]) revert TokenNotSupported();\\r\\n        \\r\\n        uint256 tokenPrice = tokenPrices[token];\\r\\n        // Calculate token amount with rounding up\\r\\n        tokenAmount = (ethAmount * 1e18 + tokenPrice - 1) / tokenPrice;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Upload file with token payment\\r\\n     * @param params Encoded parameters\\r\\n     * @param token Address of the payment token\\r\\n     */\\r\\n    function uploadFileWithToken(bytes calldata params, address token) \\r\\n        external \\r\\n        nonReentrant \\r\\n        whenNotPaused \\r\\n        returns (bytes32 fileId) \\r\\n    {\\r\\n        if (!supportedTokens[token]) revert TokenNotSupported();\\r\\n        \\r\\n        // Decode parameters to get size and storage period\\r\\n        (\\r\\n            , , , uint128 size, , , , , , uint64 storagePeriod\\r\\n        ) = abi.decode(params, (string, string, string, uint128, string, bool, bool, string[], bytes32, uint64));\\r\\n        \\r\\n        // Calculate ETH cost\\r\\n        uint256 ethCost = _calculateStorageCost(size, storagePeriod);\\r\\n        \\r\\n        // Calculate token amount needed\\r\\n        uint256 tokenAmount = calculateTokenAmount(ethCost, token);\\r\\n        \\r\\n        // Transfer tokens from user\\r\\n        IERC20(token).transferFrom(msg.sender, address(this), tokenAmount);\\r\\n        \\r\\n        // Process the upload\\r\\n        fileId = _uploadFile(params);\\r\\n        \\r\\n        emit TokenPaymentReceived(token, msg.sender, tokenAmount);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Purchase subscription with token payment\\r\\n     * @param tier Subscription tier\\r\\n     * @param duration Duration in seconds\\r\\n     * @param referrer Referrer address\\r\\n     * @param token Address of the payment token\\r\\n     */\\r\\n    function purchaseSubscriptionWithToken(\\r\\n        uint8 tier,\\r\\n        uint64 duration,\\r\\n        address referrer,\\r\\n        address token\\r\\n    ) external nonReentrant {\\r\\n        if (!supportedTokens[token]) revert TokenNotSupported();\\r\\n        \\r\\n        // Calculate ETH cost\\r\\n        uint256 ethCost = _calculateSubscriptionCost(tier, duration);\\r\\n        \\r\\n        // Calculate token amount needed\\r\\n        uint256 tokenAmount = calculateTokenAmount(ethCost, token);\\r\\n        \\r\\n        // Transfer tokens from user\\r\\n        IERC20(token).transferFrom(msg.sender, address(this), tokenAmount);\\r\\n        \\r\\n        // Process the subscription purchase\\r\\n        _processSubscriptionPurchase(tier, duration, referrer);\\r\\n        \\r\\n        emit TokenPaymentReceived(token, msg.sender, tokenAmount);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Internal function to process subscription purchase\\r\\n     */\\r\\n    function _processSubscriptionPurchase(\\r\\n        uint8 tier,\\r\\n        uint64 duration,\\r\\n        address referrer\\r\\n    ) internal {\\r\\n        if (tier > MAX_TIER) revert InvalidInput();\\r\\n        if (duration < minimumStoragePeriod) revert InvalidInput();\\r\\n        \\r\\n        // Handle referral (only once per user)\\r\\n        if (referrer != address(0) && referrer != msg.sender && referrers[msg.sender] == address(0)) {\\r\\n            referrers[msg.sender] = referrer;\\r\\n        }\\r\\n        \\r\\n        // Update subscription\\r\\n        Subscription storage sub = subscriptions[msg.sender];\\r\\n        if (sub.expiryDate > block.timestamp) {\\r\\n            unchecked {\\r\\n                sub.expiryDate += duration;\\r\\n            }\\r\\n        } else {\\r\\n            unchecked {\\r\\n                sub.expiryDate = uint64(block.timestamp + duration);\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        sub.user = msg.sender;\\r\\n        sub.storageLimit = tierStorageLimits[tier];\\r\\n        sub.bandwidthLimit = tierBandwidthLimits[tier];\\r\\n        sub.tier = tier;\\r\\n        sub.isActive = true;\\r\\n        \\r\\n        // Reset bandwidth tracking\\r\\n        lastBandwidthReset[msg.sender] = uint64(block.timestamp);\\r\\n        userBandwidthUsed[msg.sender] = 0;\\r\\n        \\r\\n        emit SubscriptionPurchased(msg.sender, tier, duration);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Withdraw tokens from contract\\r\\n     * @param token Address of the token to withdraw\\r\\n     * @param amount Amount to withdraw\\r\\n     */\\r\\n    function withdrawTokens(address token, uint256 amount) external onlyOwner {\\r\\n        if (!supportedTokens[token]) revert TokenNotSupported();\\r\\n        \\r\\n        IERC20(token).transfer(owner(), amount);\\r\\n    }\\r\\n    \\r\\n    // ============ GDV TOKEN INTEGRATION ============\\r\\n    \\r\\n    /**\\r\\n     * @dev Set GDV token address\\r\\n     * @param token Address of the GDV token contract\\r\\n     */\\r\\n    function setGDVToken(address token) external onlyOwner {\\r\\n        if (token == address(0)) revert InvalidInput();\\r\\n        gdvToken = IGDVToken(token);\\r\\n        gdvEnabled = true;\\r\\n        emit GDVTokenSet(token);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Enable/disable GDV payments\\r\\n     * @param enabled Whether GDV payments should be enabled\\r\\n     */\\r\\n    function setGDVEnabled(bool enabled) external onlyOwner {\\r\\n        gdvEnabled = enabled;\\r\\n        emit GDVEnabled(enabled);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Update GDV discount percentage\\r\\n     * @param discount New discount percentage in basis points\\r\\n     */\\r\\n    function updateGDVDiscount(uint256 discount) external onlyOwner {\\r\\n        if (discount > BASIS_POINTS) revert InvalidGDVDiscount();\\r\\n        gdvDiscount = discount;\\r\\n        emit GDVDiscountUpdated(discount);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Calculate GDV amount needed for payment with discount\\r\\n     * @param ethAmount Amount in wei\\r\\n     * @return gdvAmount Amount of GDV tokens needed\\r\\n     */\\r\\n    function calculateGDVAmount(uint256 ethAmount) public view returns (uint256 gdvAmount) {\\r\\n        if (!gdvEnabled) revert GDVNotEnabled();\\r\\n        \\r\\n        uint256 discountedAmount = ethAmount * (BASIS_POINTS - gdvDiscount) / BASIS_POINTS;\\r\\n        return gdvToken.getTokenAmount(discountedAmount);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Upload file with GDV payment\\r\\n     * @param params Encoded parameters\\r\\n     */\\r\\n    function uploadFileWithGDV(bytes calldata params) \\r\\n        external \\r\\n        nonReentrant \\r\\n        whenNotPaused \\r\\n        returns (bytes32 fileId) \\r\\n    {\\r\\n        if (!gdvEnabled) revert GDVNotEnabled();\\r\\n        \\r\\n        // Decode parameters to get size and storage period\\r\\n        (\\r\\n            , , , uint128 size, , , , , , uint64 storagePeriod\\r\\n        ) = abi.decode(params, (string, string, string, uint128, string, bool, bool, string[], bytes32, uint64));\\r\\n        \\r\\n        // Calculate ETH cost\\r\\n        uint256 ethCost = _calculateStorageCost(size, storagePeriod);\\r\\n        \\r\\n        // Calculate GDV amount needed with discount\\r\\n        uint256 gdvAmount = calculateGDVAmount(ethCost);\\r\\n        \\r\\n        // Transfer GDV tokens from user\\r\\n        gdvToken.transferFrom(msg.sender, address(this), gdvAmount);\\r\\n        \\r\\n        // Process the upload\\r\\n        fileId = _uploadFile(params);\\r\\n        \\r\\n        emit GDVPaymentReceived(msg.sender, gdvAmount);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Purchase subscription with GDV payment\\r\\n     * @param tier Subscription tier\\r\\n     * @param duration Duration in seconds\\r\\n     * @param referrer Referrer address\\r\\n     */\\r\\n    function purchaseSubscriptionWithGDV(\\r\\n        uint8 tier,\\r\\n        uint64 duration,\\r\\n        address referrer\\r\\n    ) external nonReentrant {\\r\\n        if (!gdvEnabled) revert GDVNotEnabled();\\r\\n        \\r\\n        // Calculate ETH cost\\r\\n        uint256 ethCost = _calculateSubscriptionCost(tier, duration);\\r\\n        \\r\\n        // Calculate GDV amount needed with discount\\r\\n        uint256 gdvAmount = calculateGDVAmount(ethCost);\\r\\n        \\r\\n        // Transfer GDV tokens from user\\r\\n        gdvToken.transferFrom(msg.sender, address(this), gdvAmount);\\r\\n        \\r\\n        // Process the subscription purchase\\r\\n        _processSubscriptionPurchase(tier, duration, referrer);\\r\\n        \\r\\n        emit GDVPaymentReceived(msg.sender, gdvAmount);\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Convert GDV tokens to ETH\\r\\n     * @param gdvAmount Amount of GDV tokens to convert\\r\\n     */\\r\\n    function convertGDVToEth(uint256 gdvAmount) external nonReentrant {\\r\\n        if (!gdvEnabled) revert GDVNotEnabled();\\r\\n        \\r\\n        // Transfer GDV tokens from user\\r\\n        gdvToken.transferFrom(msg.sender, address(this), gdvAmount);\\r\\n        \\r\\n        // Calculate ETH amount\\r\\n        uint256 ethAmount = gdvToken.getEthAmount(gdvAmount);\\r\\n        \\r\\n        // Transfer ETH to user\\r\\n        payable(msg.sender).transfer(ethAmount);\\r\\n    }\\r\\n    \\r\\n    // ============ RECEIVE FUNCTION ============\\r\\n    \\r\\n    receive() external payable {\\r\\n        // Allow contract to receive ETH\\r\\n    }\\r\\n}\",\"keccak256\":\"0x1c1fbefaa9d7bc5a3707693c188e28748f56536e7b47fc15edfa92f1d6a510a2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608034620002b5576001600160401b0390601f620059b938819003918201601f1916830192919084841183851017620002ba578160209284926040968752833981010312620002b557516001600160a01b03929083811690819003620002b55780156200029d57600080546001600160a01b0319808216841783559591929190829082167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08580a360018055600280546001600160881b0319166609184e72a0000017905574014000000000000000000000000000048c27395000600355600480546001600160801b03199081166903e80000000000278d00179091557419000000000000000000000000000000004000000060215574fa0000000000000000000000000000000280000000602355642386f26fc160901b6025557509c4000000000000000000000000000000fa000000006022557561a8000000000000000000000000000009c4000000006024557702c68af0bb140000000000000000000000b1a2bc2ec50000602655426301e1338081019391908410620002895786519060c08201828110888211176200027557918899600292899a99948a5285835260208301634000000081528a840192640280000000845286606086019a168a5260808501988b8a5260a086019860018a528c52600a6020528c8c209551169085541617845560018060801b03905116915160801b161760018201550193511669ff00000000000000000068ff000000000000000085549451881b169251151560481b169260018060501b0319161717179055600f6020522090421660018060401b0319825416179055516156e89081620002d18239f35b634e487b7160e01b87526041600452602487fd5b634e487b7160e01b85526011600452602485fd5b8251631e4fbdf760e01b815260006004820152602490fd5b600080fd5b634e487b7160e01b600052604160045260246000fdfe6080604052600436101561001b575b361561001957600080fd5b005b60003560e01c80630573a0dd14613ff657806306b091f914613f61578063128034d114613d095780631376d01714613ce85780631cb103fa14613c845780631fc37922146139ae5780631fd45a6a1461395d5780632002ccad1461392d578063204120bc146138f357806323ced80b146138d557806326224c6414613892578063267275e1146138605780632a7c46771461383a5780632b8578fe146137f0578063300eccab146137c0578063313b8ec31461357a5780633c4dd94f146134865780633ccfc7c3146134515780633f4ba83a146133e757806343404cc21461335c5780634506708e146133335780634a3b68cc146132f85780634e43603a1461324457806353aaa63b1461320a578063550b3a9914613102578063560dc342146130bf5780635b39515914612f1d5780635c975abb14612efa5780635ce3957d14612e805780635d8e858414612e035780635e3fddf314612db35780636412173e14612d8a5780636621599414612d5957806368c4ac2614612d1a5780636ab799f1146128a15780636e4c5f011461287a5780636ec33bb6146127f7578063715018a61461279e578063718f38a614612754578063776facd9146125095780637cb570ab146124c25780637dbc96fa1461249b5780637f50e7cc146124725780638456cb59146124185780638b32a3e7146123945780638da5cb5b1461236b578063920a253e1461234157806393b6aac0146122bb5780639525b14b14612257578063954da27f1461221457806396d3ea89146120fe57806398c9adff1461204b57806398f7733e1461200b578063a02b827714611efd578063a22064d414611e8e578063a41ca8b114611e4b578063a43bcc1214611db5578063a512542114611d05578063a56360f814611cb5578063a57b8b7514611c4d578063b73c6ce914611bc1578063bb29758114611b81578063bbcffbc714611837578063bd44a64f14611806578063be262644146113f5578063c89515a4146113b2578063c90bab4d1461137d578063d09e067e14611328578063d3ab4b42146111d4578063d4ee651b14611138578063d8ed9a6c146110cc578063d91dd84f14611089578063db2e21bc14611042578063dca2996114610ff0578063e371817e14610fca578063e704a34d14610bfd578063e83306dd14610b22578063e85d35011461089b578063f0258b4f14610875578063f046395a146107ed578063f0a2580a14610694578063f2fde38b1461060b578063f479dd5814610491578063f74b059e146103f65763fe75e3380361000e57346103f15760003660031901126103f15760206001600160801b0360025460081c16604051908152f35b600080fd5b346103f15760203660031901126103f15761040f6141b6565b61041761459e565b6001600160a01b031680151580610478575b61046657602980546001600160a01b031916821790557f334a8f7281ef0ee35ea90f5cf0308e16a1cfd42188da6400fbe6673116e52add600080a2005b604051633dd1b30560e01b8152600490fd5b5080600052602760205260ff6040600020541615610429565b346103f1576020806003193601126103f1576001600160401b036004358181116103f1576104c39036906004016141f8565b6104ce9291926145e8565b6104d66145ca565b602a549160ff8360a01c16156105f957610537906104f683860186614622565b97505050505050925050620fffff670de0b6b3a7640000936301e13380856001600160801b03928360025460081c169516020493160160141c020204615614565b6040516323b872dd60e01b815233600482015230602482015260448101829052909390928590849060649082906000906001600160a01b03165af19283156105ed57610588936105c0575b50614849565b906040519081527f7e01bdfcb9e374847e0052332dc2e9561d204d892ab54122b8c8f79a3708aad4833392a260018055604051908152f35b6105df90863d88116105e6575b6105d781836140a7565b81019061541c565b5085610582565b503d6105cd565b6040513d6000823e3d90fd5b6040516395ebbfa760e01b8152600490fd5b346103f15760203660031901126103f1576106246141b6565b61062c61459e565b6001600160a01b0390811690811561067b57600054826001600160601b0360a01b821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3005b604051631e4fbdf760e01b815260006004820152602490fd5b346103f15760403660031901126103f1576001600160401b036004358181116103f1576106c59036906004016141f8565b6106d09291926141e2565b926106d96145e8565b6106e16145ca565b60018060a01b03841692836000526020946027865260ff6040600020541615610466576107559161071485850185614622565b97505050505050925050620fffff670de0b6b3a7640000936301e13380856001600160801b03928360025460081c169516020493160160141c020204615386565b6040516323b872dd60e01b8152336004820152306024820152604481018290529092909185836064816000895af19283156105ed57610798936107d05750614849565b916040519182527fc7e4cc89b0a980a194012a15142f99855680e1a060fc1955ce40af0800a7b1e8843393a360018055604051908152f35b6107e690873d89116105e6576105d781836140a7565b5086610582565b346103f15760203660031901126103f15760c06001600160a01b03806108116141b6565b16600052600a60205260ff6040600020918254169160026001820154910154906040519384526001600160801b038116602085015260801c60408401526001600160401b0381166060840152818160401c16608084015260481c16151560a0820152f35b346103f15760203660031901126103f1576020610893600435615614565b604051908152f35b346103f15760603660031901126103f1576001600160401b036004356024358281116103f1576108cf9036906004016141f8565b6108da93919361454a565b836000526020926006845260019260018060a01b038460406000200154163303610b105785600052600685528160026040600020015460801c1615610afe57856000526006855260406000209133600052600a8652604060002093600d87526001600160801b0390610953818360406000205416614763565b90600286019683808a61096a828c54168097615206565b93015416911611610aec57829133600052600d8a52604060002090815490846001600160801b03199687928603168184160116911617905516908554161784558111610ad6576109c4816109be8454614036565b84614795565b6000601f8211600114610a515781907f7a22a9ee3d48ed0e5124a8483a35d03987ec822583eb91b03ffc68044832442e9798600092610a46575b5050600019600383901b1c191690841b1790555b805461ffff60e01b19811660e091821c61ffff90811690940190911b61ffff60e01b161781555460e01c16604051908152a2005b0135905088806109fe565b601f1982169083600052866000209160005b818110610ac157509883929187947f7a22a9ee3d48ed0e5124a8483a35d03987ec822583eb91b03ffc68044832442e9a9b10610aa7575b505050811b019055610a12565b0135600019600384901b60f8161c19169055888080610a9a565b8a830135845592870192918801918801610a63565b634e487b7160e01b600052604160045260246000fd5b604051634ba8b0a960e01b8152600490fd5b604051633b4835d960e21b8152600490fd5b60405163abea322960e01b8152600490fd5b60203660031901126103f1576001600160401b036004358181116103f157366023820112156103f15780600401358281116103f1576024600591368282851b860101116103f15791610b726145e8565b610b7a6145ca565b610b83836151c0565b9336819003604219019160005b858110610bb5576001805560405160208082528190610bb19082018a614258565b0390f35b8481831b84010135848112156103f15783019085820135918983116103f15760440182360381136103f157600192610bec91614849565b610bf6828a6151f2565b5201610b90565b346103f15760a03660031901126103f157610c16614534565b604435906001600160401b03821682036103f1576064359063ffffffff821682036103f1576084356001600160401b0381116103f157610c5a9036906004016141f8565b90600435600052600660205260018060a01b03600160406000200154163303610b105760043560005260066020526001600160401b0360026040600020015460801c1615610afe576001600160801b038316158015610fb7575b610fa5576005805467ffffffffffffffff1981166001600160401b03918216600101918216179091556040805160043560208201523360601b6bffffffffffffffffffffffff19169181019190915242605482015260c09190911b6001600160c01b0319166074820152610d91929063ffffffff90610d4081607c81015b03601f1981018352826140a7565b60208151910120956001600160401b0360405198610d5d8a614070565b6004358a523360208b01526001600160801b03881660408b0152166060890152600060808901521660a08701523691614388565b60c0840152600160e084015281600052601c602052604060002092805184556001840160018060a01b036020830151166001600160601b0360a01b825416179055610e77600285016001600160801b036040840151166001600160801b0319825416178155610e2f6001600160401b0360608501511682908154906001600160401b0360801b9060801b16906001600160401b0360801b1916179055565b6080830151815463ffffffff60c01b191660c09190911b63ffffffff60c01b1617815560a083015181546001600160e01b031660e09190911b6001600160e01b031916179055565b600384019360c08201519485516001600160401b038111610ad657602096610ea982610ea38554614036565b85614795565b8790601f8311600114610f395791806004949260e09694600092610f2e575b50508160011b916000199060031b1c19161790555b01910151151560ff801983541691161790556001600160801b0360405191168152817f1015d323bc2f29aaf19d900ccbc6b1856888b72307ec5a75c5a9c43cd4fb0c628460043593a3604051908152f35b015190508a80610ec8565b90601f1983169184600052896000209260005b818110610f8e575092600192859260e098966004989610610f75575b505050811b019055610edd565b015160001960f88460031b161c191690558a8080610f68565b92938b600181928786015181550195019301610f4c565b60405163b4fa3fb360e01b8152600490fd5b50426001600160401b0386161115610cb4565b346103f15760403660031901126103f1576020610893610fe86141e2565b600435615386565b60203660031901126103f1576004356001600160401b0381116103f15761103661102060209236906004016141f8565b906110296145e8565b6110316145ca565b614849565b60018055604051908152f35b346103f15760003660031901126103f15761105b61459e565b6000805481908190819047906001600160a01b0316828215611080575bf1156105ed57005b506108fc611078565b346103f15760203660031901126103f1576001600160a01b036110aa6141b6565b16600052600d60205260206001600160801b0360406000205416604051908152f35b346103f15760203660031901126103f1576004358015158091036103f15760207f1d3a2e9f214b18b25530f3e0058585b6ec740535caa59cd1770ccbfd90c397ac9161111661459e565b602a805460ff60a01b191660a083901b60ff60a01b16179055604051908152a1005b346103f15760403660031901126103f1576111516141b6565b6024359061115d61459e565b6001600160a01b031660008181526027602052604090205490919060ff16156104665780156111c25760207fceb40be0a58aa33916c199e469842b614ef313295573c15d82f85cc9d1a89d3291836000526028825280604060002055604051908152a2005b604051637841c2c960e11b8152600490fd5b346103f15760003660031901126103f1576040516111f18161408c565b60808091369037806040516112058161408c565b369037806040516112158161408c565b3690376040516021906000815b600190600482840110156112575790604060029286546001600160801b0381168252881c602082015201940191019092611222565b85846112628161408c565b60405160006023825b60016004818501101561129e57604060029284546001600160801b0381168252891c60208201520192019201919061126b565b505050509190916112ae8161408c565b6040519182906025946000925b600190600482860110156112f05790604060029289546001600160801b0381168252861c6020820152019701930192956112bb565b610180836113268961131b8a896113068461408c565b611313604051809761456d565b85019061456d565b61010083019061456d565bf35b346103f157602061135061133b366143ec565b9290816040519382858094519384920161416e565b8101601881520301902080548210156103f15760209161136f9161431f565b90546040519160031b1c8152f35b346103f15760203660031901126103f157600435600052601260205260206001600160801b0360406000205416604051908152f35b346103f15760203660031901126103f1576001600160a01b036113d36141b6565b16600052600f60205260206001600160401b0360406000205416604051908152f35b346103f15760603660031901126103f1576004356001600160401b0381116103f1576114259036906004016141f8565b604435151580604435036103f15733600052600a60205260026040600020015460ff8160481c16159081156117f1575b506117df578115610fa55760243561172a575b6004546001600160401b0360c01b60018260c01c0160c01b16809160018060c01b0316176004556040516114c7605c82602081019487898737878201903360601b6020830152426034830152605482015203603c8101845201826140a7565b519020916040519360a08501918583106001600160401b03841117610ad6576114f4926040523691614388565b835233602084015260243560408401526001600160401b0342166060840152608083015280600052600860205260406000209180519283516001600160401b038111610ad657611548816109be8454614036565b6020601f82116001146116be57819060039495966000926116b3575b50508160011b9160001990851b1c19161781555b6001810160018060a01b036020850151166001600160601b0360a01b8254161790556040830151600282015501906001600160401b0360608201511660ff60401b60808454930151151560401b169168ffffffffffffffffff19161717905533600052600c6020526115ee816040600020614823565b602435611695575b60443561162f575b60405160209133817f4e611b5a9758c78c82d7492e2f9bb1969b31be7f6463f3ffb3834d20310d1d4d600080a38152f35b601a5490600160401b821015610ad6576001820180601a5582101561167f57601a6000527f057c384a7d1c54f3a1b2e5e67b2617b8224fdfd1ea7234eea573a6ff665ff63e9091018190556115fe565b634e487b7160e01b600052603260045260246000fd5b60243560005260156020526116ae816040600020614823565b6115f6565b015190508680611564565b8260005260206000209560005b601f198416811061171257509582916003959697600194601f198116106116fa575b505050811b018155611578565b015160001983871b60f8161c191690558680806116ed565b828201518855600190970196602092830192016116cb565b60243560005260086020526001600160401b0360036040600020015416156117cd576024356000908152600860205260409020600101546001600160a01b03163314158061178b575b15611468575b60405163061cbdd360e51b8152600490fd5b50601160205260406000203360005260205260ff6040600020541660048110156117b757600211611773565b634e487b7160e01b600052602160045260246000fd5b60405163fc061e9f60e01b8152600490fd5b604051630fb532db60e11b8152600490fd5b90506001600160401b03429116111584611455565b346103f157611814366144a2565b906000526015602052604060002080548210156103f15760209161136f9161431f565b346103f15760803660031901126103f157611850614479565b6044359063ffffffff821682036103f1576064356001600160401b0381116103f1576118809036906004016141f8565b926004356000526006602052604060002060018060a01b036001820154163314159081611b53575b81611b43575b506117795760043560005260066020526001600160401b0360026040600020015460801c1615610afe57426001600160401b0384161115610fa5576005805467ffffffffffffffff1981166001600160401b039182166001019182161790915560408051600435602082019081523360601b6bffffffffffffffffffffffff19169282019290925242605482015260c09290921b6001600160c01b03191660748301529061195f81607c8101610d32565b519020926040518060c08101106001600160401b0360c083011117610ad65760c08101604090815260043582523360208084019182526001600160401b039490941682840190815260006060850181815263ffffffff97881660808701908152600160a08089018281528d86526009909a5296909320965187559351925190516001600160e01b031960e09190911b166001600160a01b0390931667ffffffffffffffff60a01b9190951b16939093171791830191909155929060020192511664ff0000000083549251151560201b169164ffffffffff19161717905582611a76575b60208260405190600435817fe858c17ec4703e144d651708aca8173d9af23b71bb0e3515c585dfe932c2eff9600080a38152f35b90601b60205260406000206001600160401b038411610ad65783611aa06020956109be8454614036565b6000601f8211600114611adf5781929394600092611ad4575b50508160011b916000199060031b1c19161790555b82611a42565b013590508580611ab9565b601f1982169483600052866000209160005b878110611b2c575083600195969710611b12575b505050811b019055611ace565b0135600019600384901b60f8161c19169055858080611b05565b909288600181928686013581550194019101611af1565b60029150015460f81c15856118ae565b9050601060205260406000203360005260205260ff6040600020541660048110156117b757600111906118a8565b346103f15760203660031901126103f15760043560048110156103f1576001600160801b03611bb160209261436d565b9190546040519260031b1c168152f35b346103f15760003660031901126103f15733600052601d6020526001600160801b03604060002054168015611c1a57600080808093338252601d602052604082206001600160801b031981541690553382f1156105ed57005b60405162461bcd60e51b815260206004820152600b60248201526a4e6f206561726e696e677360a81b6044820152606490fd5b346103f15760203660031901126103f157600435611c6961459e565b6127108111611ca3576020817fe4fa623f284b85c795e990f9cc4f6b5b0626280c3889f62851b8989a2609a47a92602b55604051908152a1005b60405163d027d9d760e01b8152600490fd5b346103f15760403660031901126103f157611cce6141e2565b600435600052601160205260406000209060018060a01b0316600052602052610bb160ff604060002054166040519182918261448f565b346103f15760203660031901126103f157611d1e6141b6565b611d2661459e565b6001600160a01b0390811660008181526027602052604090205490919060ff161561046657816000526027602052604060002060ff1981541690556028602052600060408120558160295491821614611da2575b507f4c910b69fe65a61f7531b9c5042b2329ca7179c77290aa7e2eb3afa3c8511fd3600080a2005b6001600160a01b03191660295581611d7a565b346103f15760803660031901126103f157611dce614469565b611dd6614534565b90611ddf61454a565b606435916001600160801b03831683036103f157611dfb61459e565b600360ff821611610fa557611e46611e1d92611e3d61001996611e1d8561436d565b90919082549060031b916001600160801b03809116831b921b1916179055565b611e1d83614337565b614352565b346103f15760203660031901126103f1576004356000908152601c6020526040902060018101546001600160a01b03163303610b1057600401805460ff19169055005b346103f15760203660031901126103f157611ea76141b6565b611eaf61459e565b6001600160a01b03168015610fa557602a80546001600160a81b0319168217600160a01b1790557f64395189a34ae5d780e1c8be6d937d798e5d7f5ade1c691495b59e9169e875d5600080a2005b60403660031901126103f157600435611f14614479565b6000828152600660205260409020600101546001600160a01b03163303610b10578160005260066020526001600160401b03908160026040600020015460801c1615610afe578260005260066020526001600160801b03928360026040600020015416670de0b6b3a7640000908560025460081c16620fffff6301e13380848888160204920160141c0202043410611ff95760005260136020526040600020918254918183160116906001600160401b0319161790556012602052604060002090815490611fe6813416828416614763565b6001600160801b03199092169116179055005b60405163cd1c886760e01b8152600490fd5b346103f15760203660031901126103f1576001600160801b0361202c61451e565b61203461459e565b166001600160801b03196003541617600355600080f35b346103f15760203660031901126103f157600435600052600660205261209f6040600020612078816140c8565b90600260018060a01b03600183015416910154604051938493610100808652850190614191565b9160208401526001600160801b03811660408401526001600160401b038160801c16606084015263ffffffff8160c01c16608084015261ffff8160e01c1660a084015260ff8160f01c16151560c084015260f81c151560e08301520390f35b346103f1576020806003193601126103f15760043561211b6145e8565b602a5460ff8160a01c16156105f9576040516323b872dd60e01b815233600482015230602482015260448101839052906001600160a01b039084908390606490829060009086165af19182156105ed5784926121f7575b50602a541691602460405180948193638fc7a25d60e01b835260048301525afa9182156105ed576000926121c8575b50506000808080938181156121bf575b3390f1156105ed5760018055005b506108fc6121b1565b90809250813d83116121f0575b6121df81836140a7565b810103126103f157516000806121a1565b503d6121d5565b61220d90833d85116105e6576105d781836140a7565b5084612172565b346103f15760203660031901126103f1576001600160a01b036122356141b6565b16600052601d60205260206001600160801b0360406000205416604051908152f35b346103f15760403660031901126103f1576122706141b6565b6024356001600160401b0381116103f1576020916122956122b29236906004016143ce565b6001600160a01b0390911660009081528380526040902090614443565b54604051908152f35b346103f15760203660031901126103f157600435600052600860205261231860406000206122e8816140c8565b9060ff60018060a01b0360018301541691600360028201549101549060405195869560a0875260a0870190614191565b93602086015260408501526001600160401b038116606085015260401c16151560808301520390f35b346103f15760003660031901126103f15760206001600160401b0360045460401c16604051908152f35b346103f15760003660031901126103f1576000546040516001600160a01b039091168152602090f35b346103f15760203660031901126103f157600435600052601c6020526040600020805490610bb160018060a01b036001830154169260028301549260ff60046123df600384016140c8565b92015416916040519585879660e01c9263ffffffff8260c01c16926001600160801b036001600160401b038460801c16931691896144b8565b346103f15760003660031901126103f15761243161459e565b6124396145ca565b600160ff1960025416176002557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586020604051338152a1005b346103f15760003660031901126103f157602a546040516001600160a01b039091168152602090f35b346103f15760003660031901126103f15760206001600160401b0360045416604051908152f35b346103f15760203660031901126103f1576124db61451e565b6124e361459e565b610100600160881b036002549160081b1690610100600160881b03191617600255600080f35b60603660031901126103f15761251d614469565b612525614479565b61252d6141cc565b906125366145e8565b600360ff841611610fa5576004546001600160401b03828116929181168310610fa55761256382866152a2565b3410611ff9577f12f97e9c312855c3f48ec2b207c7ed3789fdf1e5250bceda743d6b99db15e549936126eb936126c6926001926001600160a01b03908116908115159081612749575b81612730575b5061270a575b5033600052600a60205260406000209160028301908282549142828416116000146126f4575050815467ffffffffffffffff19811690841688018416178255505b82546001600160a01b031916331783556126676126158a61436d565b95906001600160801b03968791549060031b1c1694016001600160801b03199485825416178155856126468c614337565b90549060031b1c166001600160801b0382549181199060801b169116179055565b805460ff60401b191660408a901b60ff60401b16178155600160481b60ff60481b1982541617905533600052600f60205260406000209042166001600160401b0319825416179055600e602052604060002090815416905534166152d5565b6040805160ff90951685526001600160401b0390911660208501523393918291820190565b0390a260018055005b420116906001600160401b0319161781556125f9565b33600052601e6020526040600020906001600160601b0360a01b825416179055886125b8565b905033600052601e60205260406000205416158a6125b2565b3383141591506125ac565b346103f15760403660031901126103f15761276d6141b6565b6001600160a01b03166000908152600b60205260409020805460243591908210156103f15760209161136f9161431f565b346103f15760003660031901126103f1576127b761459e565b600080546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b346103f15760203660031901126103f157600435600052601c60205260406000208054610bb160018060a01b0360018401541692600281015492612845600360ff60048501541693016140c8565b906040519585879660e01c9263ffffffff8260c01c16926001600160801b036001600160401b038460801c16931691896144b8565b346103f15760003660031901126103f15760206001600160801b0360035416604051908152f35b346103f1576020806003193601126103f157600435600081815260068352604090206001908101546001600160a01b03163303610b105781600052600683526001600160401b0360026040600020015460801c1615610afe5782908260005260068252604060002060078352604060002090600391600283820192019161292e85845460f81c93016140c8565b81546129398161460b565b9261294760405194856140a7565b81845260009081528881208985015b838310612cef57505050508661297991816040519382858094519384920161416e565b81016018815203019020856000905b612c6f575b5050846000905b612ba7575b5050612ac3575b33600052600d84526040600020908154906001600160801b0390818154168284161015600014612ab05754835492506129dd908216838316615206565b16906001600160801b0319161790555b83600052600683526000600260408220612a06816147da565b8285820155015583600052600783526040600020612a23816147da565b612a2e8382016147da565b612a3a600282016147da565b018054906000815581612a8b575b84601385826000525260406000206001600160401b031981541690557f88efefb1eaec3d3a0e08ed74bc99a3407d454b5da66112fed68b20d54837ccae600080a2005b60005282600020908101905b81811015612a485780612aaa84926147da565b01612a97565b50506001600160801b03191690556129ed565b6000835b612ad2575b506129a0565b8360199182549283821015612b9f5788612aeb836142e8565b905490881b1c14612b085750612b0291925061521f565b90612ac7565b915060001992838101908111612b8957612b33612b27612b4a926142e8565b905490881b1c926142e8565b819391549060031b91821b91600019901b19161790565b905580548015612b7357820191612b60836142e8565b9091825491871b1b191690555585612acc565b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b505050612acc565b8151811015612c6a579081612bc6612bc08894846151f2565b5161441d565b6000845b612be1575b5050612bda9061521f565b9091612994565b81929394915480821015612c5f578b612bfa838661431f565b9054908b1b1c14612c195750612c0f9061521f565b8194939291612bca565b9092949391506000198101908111612b895784612bda93612c51612b33612c44612c58958e9a61431f565b9054908d1b1c928461431f565b905561522e565b908a612bcf565b508194939250612bcf565b612999565b81548781831015612ce8575089612c86838561431f565b905490891b1c14612cb0575090612ca3879897969594939261521f565b9091929394959697612988565b9092916000198201918211612b89578793612c51612b33612cd4612ce1958561431f565b9054908b1b1c928461431f565b908861298d565b505061298d565b898b8192612d04979e9d9b9a999897856140c8565b8152019201920191909a9394959697999a612956565b346103f15760203660031901126103f1576001600160a01b03612d3b6141b6565b166000526027602052602060ff604060002054166040519015158152f35b346103f157612d67366144a2565b906000526016602052604060002080548210156103f15760209161136f9161431f565b346103f15760003660031901126103f1576029546040516001600160a01b039091168152602090f35b346103f15760403660031901126103f157612dcc6141e2565b600435600052601060205260406000209060018060a01b0316600052602052610bb160ff604060002054166040519182918261448f565b346103f15760203660031901126103f1576004356000526007602052612e646040600020610bb1612e33826140c8565b91612e72612e4f6002612e48600185016140c8565b93016140c8565b91604051958695606087526060870190614191565b908582036020870152614191565b908382036040850152614191565b346103f15760203660031901126103f157600435600052600960205260c0604060002060ff815491600260018201549101549060405193845260018060a01b03811660208501526001600160401b038160a01c16604085015260e01c606084015263ffffffff8116608084015260201c16151560a0820152f35b346103f15760003660031901126103f157602060ff600254166040519015158152f35b346103f1576020806003193601126103f1576004359081600052600681526001600160401b038060026040600020015460801c1615610afe57826000526006825260406000209260018060a01b0393846001820154163314159081613093575b81613083575b506117795761300a9361ffff916000526006845261305e6040600020936007865260406000209460028101549360018201541660138852613024836040600020541697613016612fd2826140c8565b9a612ff46002612fed612fe7600187016140c8565b986140c8565b94016140c8565b95604051809e819e610160808452830190614191565b92818403910152614191565b908a820360408c0152614191565b926001600160801b03861660608a01528560801c16608089015260ff8560f01c16151560a089015260c088015286820360e0880152614191565b9261010085015263ffffffff8160c01c1661012085015260e01c166101408301520390f35b60029150015460f81c1585612f83565b905060108452604060002033600052845260ff6040600020541660048110156117b75760011190612f7d565b346103f15760203660031901126103f1576001600160a01b036130e06141b6565b16600052600e60205260206001600160801b0360406000205416604051908152f35b346103f15760803660031901126103f15761311b614469565b613123614479565b9061312c6141cc565b6064356001600160a01b0381169291908381036103f15761314b6145e8565b83600052602760205260ff6040600020541615610466576131759061317086856152a2565b615386565b6040516323b872dd60e01b815233600482015230602482015260448101829052909490926020846064816000895af19384156105ed576131ba946131ec575b50615434565b6040519182527fc7e4cc89b0a980a194012a15142f99855680e1a060fc1955ce40af0800a7b1e860203393a360018055005b6132039060203d81116105e6576105d781836140a7565b50866131b4565b346103f15760203660031901126103f1576001600160a01b0361322b6141b6565b16600052601f6020526020604060002054604051908152f35b346103f1576020806003193601126103f157610100906001600160a01b0361326a6141b6565b16600052600a81526001600160401b036040600020600d83526001600160801b03908160406000205416936001820154600e82528360406000205416600b835260406000205492600c8152600260406000205495015495604051988952831690880152604087015260801c6060860152608085015260a084015260ff8160401c1660c08401521660e0820152f35b346103f15760203660031901126103f15760206001600160a01b038061331c6141b6565b16600052601e825260406000205416604051908152f35b346103f15760203660031901126103f1576004356019548110156103f15761136f6020916142e8565b346103f15760403660031901126103f1576133756141b6565b6024359061338161459e565b6001600160a01b0316908115610fa55780156111c25760207ff4c563a3ea86ff1f4275e8c207df0375a51963f2b831b7bf4da8be938d92876c9183600052602782526040600020600160ff198254161790556028825280604060002055604051908152a2005b346103f15760003660031901126103f15761340061459e565b60025460ff81161561343f5760ff19166002557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6020604051338152a1005b604051638dfc202b60e01b8152600490fd5b346103f15760203660031901126103f157600435600052601360205260206001600160401b0360406000205416604051908152f35b346103f15760603660031901126103f15761349f614469565b6134a7614479565b6134af6141cc565b6134b76145e8565b602a549160ff8360a01c16156105f9576134d96134d482866152a2565b615614565b6040516323b872dd60e01b81523360048201523060248201526044810182905290949093602090859060649082906000906001600160a01b03165af19384156105ed5761352a9461355c5750615434565b6040519081527f7e01bdfcb9e374847e0052332dc2e9561d204d892ab54122b8c8f79a3708aad460203392a260018055005b6135739060203d81116105e6576105d781836140a7565b50856131b4565b61358336614225565b61358b6145e8565b82600052602092601c845260406000209060ff600483015416156137ae576002820192835494426001600160401b038760801c1611156137ae578560e01c801515908161379a575b506137885760038401906135e78254614036565b1515928361375a575b505050611779576001600160801b038085163410611ff957825460005260068652613687600160026040600020613659613629826140c8565b895463ffffffff60c01b191660c09b8c1c63ffffffff908116909601909b1b63ffffffff60c01b169a909a178955565b01805463ffffffff60c01b19811660c091821c8416600101909316901b63ffffffff60c01b16919091179055565b600183015493548116936001600160a01b0316600085828115613750575b600092839283928392f1156105ed57610bb1947f0d59d45505505a9661a4d8f5a34cf177bb24da7babb871d6496a5da4e824461b92604092600052601d895282600020908154906136f884828416614763565b16906001600160801b03191617905581519033825288820152a2549160405193849333907f867558aef063b7f1f5ee4daa8d18b1811be91a77d9eb7890b94188892e11ff17600080a360018055808452830190614191565b6108fc92506136a5565b6137789293509061376c913691614388565b878151910120916140c8565b86815191012014158680806135f0565b6040516381a36e7f60e01b8152600490fd5b905063ffffffff8760c01c161015886135d3565b604051630614853960e21b8152600490fd5b346103f15760203660031901126103f15760043560048110156103f1576001600160801b03611bb1602092614352565b346103f15760403660031901126103f1576138096141b6565b6001600160a01b03166000908152600c60205260409020805460243591908210156103f15760209161136f9161431f565b346103f15760003660031901126103f157602060ff602a5460a01c166040519015158152f35b346103f157602061387361133b366143ec565b8101601781520301902080548210156103f15760209161136f9161431f565b346103f15760203660031901126103f1576001600160a01b036138b36141b6565b16600052601460205260206001600160801b0360406000205416604051908152f35b346103f15760003660031901126103f1576020602b54604051908152f35b346103f15760203660031901126103f1576001600160a01b036139146141b6565b1660005260286020526020604060002054604051908152f35b346103f15760203660031901126103f15760043560048110156103f1576001600160801b03611bb1602092614337565b346103f15760203660031901126103f157600435601a548110156103f157602090601a6000527f057c384a7d1c54f3a1b2e5e67b2617b8224fdfd1ea7234eea573a6ff665ff63e0154604051908152f35b346103f15760203660031901126103f1576001600160a01b036139cf6141b6565b16600052600b60205260406000208054906139e9826151c0565b906139f383615258565b926139fd81615258565b613a068261460b565b90613a1460405192836140a7565b828252601f199586613a258561460b565b01366020850137613a358461460b565b93613a4360405195866140a7565b80855287613a508261460b565b01366020870137613a608161460b565b97613a6e604051998a6140a7565b818952613a7a8261460b565b013660208a0137613a8a81615258565b9560005b828110613b9e5750505090613ac3613ad192613ab56040519860e08a5260e08a0190614258565b9088820360208a015261428c565b90868203604088015261428c565b84810360608601526020808351928381520192019060005b818110613b7f5750505083810360808501526020808351928381520192019060005b818110613b605750505082810360a08401526020808551928381520194019060005b818110613b48578480610bb1888783820360c085015261428c565b82511515865260209586019590920191600101613b2d565b82516001600160401b0316845260209384019390920191600101613b0b565b82516001600160801b0316845260209384019390920191600101613ae9565b613ba8818361431f565b90549060031b1c80600052600660205260406000206007602052604060002091613bd2848d6151f2565b52613bdc826140c8565b613be684886151f2565b52613bf183876151f2565b50613bfb816140c8565b613c0584896151f2565b52613c1083886151f2565b50600201546001600160801b038116613c29848a6151f2565b528060801c6001600160401b0316613c41848b6151f2565b52613c4c838d6151f2565b9060f81c15159052600101613c60906140c8565b613c6a828a6151f2565b52613c7581896151f2565b50613c7f9061521f565b613a8e565b346103f15760203660031901126103f1576004356001600160401b0381116103f157613cb660209136906004016141f8565b9190336000528180526040600020836040519485938437820190815203019020548015610afe57602090604051908152f35b346103f15760003660031901126103f157602060035460801c604051908152f35b346103f157613d1736614225565b918060005260209260098452604060002060028101549160ff83871c16156137ae5760018201948554946001600160401b039542878260a01c1611156137885763ffffffff8096168015159182613f53575b505061378857600052601b8752604060002091613d868354614036565b613f31575b5050505490816000526006855260406000209233600052600a865260406000209060ff600283015460481c16613e60575b505083546001600160e01b03811660e091821c600101831690911b6001600160e01b03191617909355613e4b92613e1f905b60028401805463ffffffff60c01b19811660c091821c8416600101909316901b63ffffffff60c01b16919091179055565b33907f867558aef063b7f1f5ee4daa8d18b1811be91a77d9eb7890b94188892e11ff17600080a36140c8565b90610bb1604051928284938452830190614191565b600f87939293528062278d0081604060002054160116421015613ef9575b50600e86526001600160801b0391826040600020541690836001613ea98260028a0154168095614763565b92015460801c911611613ee757336000908152600e88526040902080546001600160801b031981169085169092019093161790915580613dee613dbc565b604051635c31fe0f60e11b8152600490fd5b600e875260406000206001600160801b03198154169055600f875260406000209042166001600160401b031982541617905586613e7e565b613f409161376c913691614388565b8681519101200361177957858080613d8b565b60e01c101590508980613d69565b346103f15760403660031901126103f157613f7a6141b6565b613f8261459e565b6001600160a01b0390811660008181526027602052604090205490919060ff1615610466576000916044602092845416604051948593849263a9059cbb60e01b8452600484015260243560248401525af180156105ed57613fdf57005b6100199060203d81116105e6576105d781836140a7565b346103f15760203660031901126103f157600435600052601b602052610bb161402260406000206140c8565b604051918291602083526020830190614191565b90600182811c92168015614066575b602083101461405057565b634e487b7160e01b600052602260045260246000fd5b91607f1691614045565b61010081019081106001600160401b03821117610ad657604052565b608081019081106001600160401b03821117610ad657604052565b90601f801991011681019081106001600160401b03821117610ad657604052565b90604051918260008254926140dc84614036565b90818452600194858116908160001461414b5750600114614108575b5050614106925003836140a7565b565b9093915060005260209081600020936000915b818310614133575050614106935082010138806140f8565b8554888401850152948501948794509183019161411b565b91505061410694506020925060ff191682840152151560051b82010138806140f8565b60005b8381106141815750506000910152565b8181015183820152602001614171565b906020916141aa8151809281855285808601910161416e565b601f01601f1916010190565b600435906001600160a01b03821682036103f157565b604435906001600160a01b03821682036103f157565b602435906001600160a01b03821682036103f157565b9181601f840112156103f1578235916001600160401b0383116103f157602083818601950101116103f157565b9060406003198301126103f15760043591602435906001600160401b0382116103f157614254916004016141f8565b9091565b90815180825260208080930193019160005b828110614278575050505090565b83518552938101939281019260010161426a565b908082519081815260208091019281808460051b8301019501936000915b8483106142ba5750505050505090565b90919293949584806142d8600193601f198682030187528a51614191565b98019301930191949392906142aa565b60195481101561167f5760196000527f944998273e477b495144fb8794c914197f3ccb46be2900f4698fd0ef743c96950190600090565b805482101561167f5760005260206000200190600090565b90600482101561167f5760108260011c6023019260041b1690565b90600482101561167f5760108260011c6025019260041b1690565b90600482101561167f5760108260011c6021019260041b1690565b9291926001600160401b038211610ad657604051916143b1601f8201601f1916602001846140a7565b8294818452818301116103f1578281602093846000960137010152565b9080601f830112156103f1578160206143e993359101614388565b90565b60406003198201126103f157600435906001600160401b0382116103f157614416916004016143ce565b9060243590565b602061443691816040519382858094519384920161416e565b8101601781520301902090565b60209061445d92826040519483868095519384920161416e565b82019081520301902090565b6004359060ff821682036103f157565b602435906001600160401b03821682036103f157565b9190602083019260048210156117b75752565b60409060031901126103f1576004359060243590565b96936001600160801b03614516969460e098946001600160401b03949c9b9c8b5260018060a01b031660208b015216604089015216606087015263ffffffff80921660808701521660a08501526101008060c0860152840190614191565b931515910152565b600435906001600160801b03821682036103f157565b602435906001600160801b03821682036103f157565b604435906001600160801b03821682036103f157565b359081151582036103f157565b6000915b6004831061457e57505050565b6001906001600160801b0383511681526020809101920192019190614571565b6000546001600160a01b031633036145b257565b60405163118cdaa760e01b8152336004820152602490fd5b60ff600254166145d657565b60405163d93c066560e01b8152600490fd5b6002600154146145f9576002600155565b604051633ee5aeb560e01b8152600490fd5b6001600160401b038111610ad65760051b60200190565b610140818303126103f1576001600160401b039080358281116103f1578361464b9183016143ce565b93602093848301358481116103f157816146669185016143ce565b9460408401358581116103f1578261467f9186016143ce565b9460608501356001600160801b03811681036103f1579460808101358281116103f157846146ae9183016143ce565b946146bb60a08301614560565b946146c860c08401614560565b9460e08401358581116103f15784019180601f840112156103f1578235926146ef8461460b565b936146fd60405195866140a7565b808552838086019160051b830101928084116103f157848301915b84831061473e575050505050509261012061010084013593013590811681036103f15790565b82358a81116103f1578691614758848480948901016143ce565b815201920191614718565b9190916001600160801b0380809416911601918211612b8957565b818110614789575050565b6000815560010161477e565b9190601f81116147a457505050565b614106926000526020600020906020601f840160051c830193106147d0575b601f0160051c019061477e565b90915081906147c3565b6147e48154614036565b90816147ee575050565b81601f60009311600114614800575055565b90808391825261481f601f60208420940160051c84016001850161477e565b5555565b805490600160401b821015610ad65781612b339160016148459401815561431f565b9055565b61485591810190614622565b969793989092959194885115610fa5576001600160801b0383161580156151a9575b615197576004546001600160401b0381166001600160401b038a1610610fa55733600052600a6020526040600020600281015460ff8160481c1615908115615182575b506117df5733600052600d6020526001600160801b038060016148e4888360406000205416614763565b93015416911611610aec57670de0b6b3a76400006001600160801b0360025460081c166301e13380826001600160401b038d16020490620fffff6001600160801b0388160160141c0202043410611ff95789906001600160401b0360801b60016001600160401b038360801c160160801b16906001600160401b0360801b191617806004556149bd605c60405180936020614988818401978881519384920161416e565b8201903360601b60208301524260348301526001600160401b0360c01b9060401b16605482015203603c8101845201826140a7565b5190209933600052602080528a6149d860406000208c614443565b55604051906149e682614070565b8a82523360208301526001600160801b03851660408301526001600160401b034216606083015260006080830152600160a0830152151560c082015287151560e08201528a600052600660205260406000209080518051906001600160401b038211610ad657614a6082614a5a8654614036565b86614795565b602090601f83116001146151155760029392916000918361510a575b50508160011b916000199060031b1c19161783555b60208101516001840180546001600160a01b039092166001600160a01b0319909216919091179055604080820151606083015160808085015160a086015160c08088015160e0988901519290981b61ffff60e01b1692901b63ffffffff60c01b1667ffffffffffffffff60801b94841b949094166001600160801b0390951694909417929092179190911793151560f01b60ff60f01b169390931790151560f81b6001600160f81b031916179290930191909155905192906001600160401b0390840190811190841117610ad657608083016040528252846020830152604082015284606082015288600052600760205260406000209080518051906001600160401b038211610ad6578190614bb182614bab8754614036565b87614795565b602090601f831160011461509e57600092615093575b50508160011b916000199060031b1c19161782555b60208101518051906001600160401b038211610ad6578190614c0e82614c056001880154614036565b60018801614795565b602090601f831160011461502157600092615016575b50508160011b916000199060031b1c19161760018301555b60408101518051906001600160401b038211610ad657614c6c82614c636002870154614036565b60028701614795565b602090601f8311600114614fa357606093929160009183614f98575b50508160011b916000199060031b1c19161760028401555b0151805190600160401b8211610ad6576003830154826003850155808310614f65575b5090600360208c969594930192016000526020600020916000905b828210614e765750505050614d5f93614d509260209233600052600b8452614d0a866040600020614823565b33600052600d84526040600020906001600160801b038254918183160116906001600160801b03191617905580614e5b575b50816040519382858094519384920161416e565b81016018815203019020614823565b80519060005b828110614e3c57505050614e0c575b614dcd906001600160801b033416908460005260126020526040600020826001600160801b031982541617905560136020526001600160401b0380604060002092164201166001600160401b03198254161790556152d5565b817f7237b089d1a252ec5312d4f64b1378a99d12760dfcaa22429ba0bd7c31d3fc886040516020815280614e0633956020830190614191565b0390a390565b60195490600160401b821015610ad65783614e33612b33846001614dcd96016019556142e8565b90559050614d74565b80614e5588614e50612bc0600195876151f2565b614823565b01614d65565b60005260168252614e70846040600020614823565b38614d3c565b8091929394959650518051906001600160401b038211610ad657614ea482614e9e8854614036565b88614795565b602090601f8311600114614ef5579282600194936020938695600092614eea575b5050600019600383901b1c191690841b1787555b01940191018b959493929192614cde565b015190503880614ec5565b908660005260206000209160005b601f1985168110614f4d575083602093600196938796938794601f19811610614f34575b505050811b018755614ed9565b015160001960f88460031b161c19169055388080614f27565b91926020600181928685015181550194019201614f03565b600384016000526020600020908382015b8183018110614f86575050614cc3565b80614f926001926147da565b01614f76565b015190503880614c88565b906002850160005260206000209160005b601f1985168110614ffe575091839160019360609695601f19811610614fe5575b505050811b016002840155614ca0565b015160001960f88460031b161c19169055388080614fd5565b91926020600181928685015181550194019201614fb4565b015190503880614c24565b9250600185016000526020600020906000935b601f1984168510615078576001945083601f1981161061505f575b505050811b016001830155614c3c565b015160001960f88460031b161c1916905538808061504f565b81810151835560209485019460019093019290910190615034565b015190503880614bc7565b9250846000526020600020906000935b601f19841685106150ef576001945083601f198116106150d6575b505050811b018255614bdc565b015160001960f88460031b161c191690553880806150c9565b818101518355602094850194600190930192909101906150ae565b015190503880614a7c565b908460005260206000209160005b601f198516811061516a575091839160019360029695601f19811610615151575b505050811b018355614a91565b015160001960f88460031b161c19169055388080615144565b91926020600181928685015181550194019201615123565b90506001600160401b034291161115386148ba565b604051637ff0f53960e01b8152600490fd5b5060035460801c6001600160801b03841611614877565b906151ca8261460b565b6151d760405191826140a7565b82815280926151e8601f199161460b565b0190602036910137565b805182101561167f5760209160051b010190565b6001600160801b039182169082160391908211612b8957565b6000198114612b895760010190565b8054908115612b735760001991820191615248838361431f565b909182549160031b1b1916905555565b906152628261460b565b61526f60405191826140a7565b8281528092615280601f199161460b565b019060005b82811061529157505050565b806060602080938501015201615285565b6001600160401b039162278d0062263b806152c46001600160801b0394614352565b959054931601049260031b1c160290565b336000908152601e60205260408120546001600160a01b031691826152f957505050565b6127106001600160801b0380926001600160401b0360045460401c160216041690828152601f6020526040812082815401905580828482821561537d575b839283928392f115615371575060207fa81d02e535011fd802e58bd5357645a72a434aa58d1d854c19616ea74ca58d4091604051908152a2565b604051903d90823e3d90fd5b506108fc615337565b6001600160a01b039091166000818152602760205260408120549092919060ff16156104665782526028602052604082205491670de0b6b3a764000091828102928184041490151715615408578282018092116154085760001982019182116154085782156153f457500490565b634e487b7160e01b81526012600452602490fd5b634e487b7160e01b81526011600452602490fd5b908160209103126103f1575180151581036103f15790565b91600360ff841611610fa5576001600160401b03918260045416838216908110610fa5577f12f97e9c312855c3f48ec2b207c7ed3789fdf1e5250bceda743d6b99db15e549936155af936001600160a01b03908116908115159081615609575b816155f0575b506155ca575b5033600052600a60205260406000209160028301908282549142828416116000146155b4575050815467ffffffffffffffff19811690841686018416178255505b82546001600160a01b0319163317835561553060016154ff8961436d565b91906001600160801b03928391549060031b1c169501906001600160801b031995868354161782556126468a614337565b805460ff60401b1916604088901b60ff60401b16178155600160481b60ff60481b1982541617905533600052600f60205260406000209042166001600160401b0319825416179055600e60205260406000209081541690556040519182913395839092916001600160401b0360209160ff604085019616845216910152565b0390a2565b420116906001600160401b0319161781556154e1565b33600052601e6020526040600020906001600160601b0360a01b825416179055386154a0565b905033600052601e60205260406000205416153861549a565b338314159150615494565b602a549060ff8260a01c16156105f957602b5461271090810391818311612b8957828102928184041490151715612b895760405163c2507ac160e01b81529104600482015290602090829060249082906001600160a01b03165afa9081156105ed57600091615681575090565b906020823d82116156aa575b8161569a602093836140a7565b810103126156a757505190565b80fd5b3d915061568d56fea2646970667358221220f6312069ba5a759149863b075f1cca45f96e29e5b23523edd88afae9e539dff864736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436101561001b575b361561001957600080fd5b005b60003560e01c80630573a0dd14613ff657806306b091f914613f61578063128034d114613d095780631376d01714613ce85780631cb103fa14613c845780631fc37922146139ae5780631fd45a6a1461395d5780632002ccad1461392d578063204120bc146138f357806323ced80b146138d557806326224c6414613892578063267275e1146138605780632a7c46771461383a5780632b8578fe146137f0578063300eccab146137c0578063313b8ec31461357a5780633c4dd94f146134865780633ccfc7c3146134515780633f4ba83a146133e757806343404cc21461335c5780634506708e146133335780634a3b68cc146132f85780634e43603a1461324457806353aaa63b1461320a578063550b3a9914613102578063560dc342146130bf5780635b39515914612f1d5780635c975abb14612efa5780635ce3957d14612e805780635d8e858414612e035780635e3fddf314612db35780636412173e14612d8a5780636621599414612d5957806368c4ac2614612d1a5780636ab799f1146128a15780636e4c5f011461287a5780636ec33bb6146127f7578063715018a61461279e578063718f38a614612754578063776facd9146125095780637cb570ab146124c25780637dbc96fa1461249b5780637f50e7cc146124725780638456cb59146124185780638b32a3e7146123945780638da5cb5b1461236b578063920a253e1461234157806393b6aac0146122bb5780639525b14b14612257578063954da27f1461221457806396d3ea89146120fe57806398c9adff1461204b57806398f7733e1461200b578063a02b827714611efd578063a22064d414611e8e578063a41ca8b114611e4b578063a43bcc1214611db5578063a512542114611d05578063a56360f814611cb5578063a57b8b7514611c4d578063b73c6ce914611bc1578063bb29758114611b81578063bbcffbc714611837578063bd44a64f14611806578063be262644146113f5578063c89515a4146113b2578063c90bab4d1461137d578063d09e067e14611328578063d3ab4b42146111d4578063d4ee651b14611138578063d8ed9a6c146110cc578063d91dd84f14611089578063db2e21bc14611042578063dca2996114610ff0578063e371817e14610fca578063e704a34d14610bfd578063e83306dd14610b22578063e85d35011461089b578063f0258b4f14610875578063f046395a146107ed578063f0a2580a14610694578063f2fde38b1461060b578063f479dd5814610491578063f74b059e146103f65763fe75e3380361000e57346103f15760003660031901126103f15760206001600160801b0360025460081c16604051908152f35b600080fd5b346103f15760203660031901126103f15761040f6141b6565b61041761459e565b6001600160a01b031680151580610478575b61046657602980546001600160a01b031916821790557f334a8f7281ef0ee35ea90f5cf0308e16a1cfd42188da6400fbe6673116e52add600080a2005b604051633dd1b30560e01b8152600490fd5b5080600052602760205260ff6040600020541615610429565b346103f1576020806003193601126103f1576001600160401b036004358181116103f1576104c39036906004016141f8565b6104ce9291926145e8565b6104d66145ca565b602a549160ff8360a01c16156105f957610537906104f683860186614622565b97505050505050925050620fffff670de0b6b3a7640000936301e13380856001600160801b03928360025460081c169516020493160160141c020204615614565b6040516323b872dd60e01b815233600482015230602482015260448101829052909390928590849060649082906000906001600160a01b03165af19283156105ed57610588936105c0575b50614849565b906040519081527f7e01bdfcb9e374847e0052332dc2e9561d204d892ab54122b8c8f79a3708aad4833392a260018055604051908152f35b6105df90863d88116105e6575b6105d781836140a7565b81019061541c565b5085610582565b503d6105cd565b6040513d6000823e3d90fd5b6040516395ebbfa760e01b8152600490fd5b346103f15760203660031901126103f1576106246141b6565b61062c61459e565b6001600160a01b0390811690811561067b57600054826001600160601b0360a01b821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3005b604051631e4fbdf760e01b815260006004820152602490fd5b346103f15760403660031901126103f1576001600160401b036004358181116103f1576106c59036906004016141f8565b6106d09291926141e2565b926106d96145e8565b6106e16145ca565b60018060a01b03841692836000526020946027865260ff6040600020541615610466576107559161071485850185614622565b97505050505050925050620fffff670de0b6b3a7640000936301e13380856001600160801b03928360025460081c169516020493160160141c020204615386565b6040516323b872dd60e01b8152336004820152306024820152604481018290529092909185836064816000895af19283156105ed57610798936107d05750614849565b916040519182527fc7e4cc89b0a980a194012a15142f99855680e1a060fc1955ce40af0800a7b1e8843393a360018055604051908152f35b6107e690873d89116105e6576105d781836140a7565b5086610582565b346103f15760203660031901126103f15760c06001600160a01b03806108116141b6565b16600052600a60205260ff6040600020918254169160026001820154910154906040519384526001600160801b038116602085015260801c60408401526001600160401b0381166060840152818160401c16608084015260481c16151560a0820152f35b346103f15760203660031901126103f1576020610893600435615614565b604051908152f35b346103f15760603660031901126103f1576001600160401b036004356024358281116103f1576108cf9036906004016141f8565b6108da93919361454a565b836000526020926006845260019260018060a01b038460406000200154163303610b105785600052600685528160026040600020015460801c1615610afe57856000526006855260406000209133600052600a8652604060002093600d87526001600160801b0390610953818360406000205416614763565b90600286019683808a61096a828c54168097615206565b93015416911611610aec57829133600052600d8a52604060002090815490846001600160801b03199687928603168184160116911617905516908554161784558111610ad6576109c4816109be8454614036565b84614795565b6000601f8211600114610a515781907f7a22a9ee3d48ed0e5124a8483a35d03987ec822583eb91b03ffc68044832442e9798600092610a46575b5050600019600383901b1c191690841b1790555b805461ffff60e01b19811660e091821c61ffff90811690940190911b61ffff60e01b161781555460e01c16604051908152a2005b0135905088806109fe565b601f1982169083600052866000209160005b818110610ac157509883929187947f7a22a9ee3d48ed0e5124a8483a35d03987ec822583eb91b03ffc68044832442e9a9b10610aa7575b505050811b019055610a12565b0135600019600384901b60f8161c19169055888080610a9a565b8a830135845592870192918801918801610a63565b634e487b7160e01b600052604160045260246000fd5b604051634ba8b0a960e01b8152600490fd5b604051633b4835d960e21b8152600490fd5b60405163abea322960e01b8152600490fd5b60203660031901126103f1576001600160401b036004358181116103f157366023820112156103f15780600401358281116103f1576024600591368282851b860101116103f15791610b726145e8565b610b7a6145ca565b610b83836151c0565b9336819003604219019160005b858110610bb5576001805560405160208082528190610bb19082018a614258565b0390f35b8481831b84010135848112156103f15783019085820135918983116103f15760440182360381136103f157600192610bec91614849565b610bf6828a6151f2565b5201610b90565b346103f15760a03660031901126103f157610c16614534565b604435906001600160401b03821682036103f1576064359063ffffffff821682036103f1576084356001600160401b0381116103f157610c5a9036906004016141f8565b90600435600052600660205260018060a01b03600160406000200154163303610b105760043560005260066020526001600160401b0360026040600020015460801c1615610afe576001600160801b038316158015610fb7575b610fa5576005805467ffffffffffffffff1981166001600160401b03918216600101918216179091556040805160043560208201523360601b6bffffffffffffffffffffffff19169181019190915242605482015260c09190911b6001600160c01b0319166074820152610d91929063ffffffff90610d4081607c81015b03601f1981018352826140a7565b60208151910120956001600160401b0360405198610d5d8a614070565b6004358a523360208b01526001600160801b03881660408b0152166060890152600060808901521660a08701523691614388565b60c0840152600160e084015281600052601c602052604060002092805184556001840160018060a01b036020830151166001600160601b0360a01b825416179055610e77600285016001600160801b036040840151166001600160801b0319825416178155610e2f6001600160401b0360608501511682908154906001600160401b0360801b9060801b16906001600160401b0360801b1916179055565b6080830151815463ffffffff60c01b191660c09190911b63ffffffff60c01b1617815560a083015181546001600160e01b031660e09190911b6001600160e01b031916179055565b600384019360c08201519485516001600160401b038111610ad657602096610ea982610ea38554614036565b85614795565b8790601f8311600114610f395791806004949260e09694600092610f2e575b50508160011b916000199060031b1c19161790555b01910151151560ff801983541691161790556001600160801b0360405191168152817f1015d323bc2f29aaf19d900ccbc6b1856888b72307ec5a75c5a9c43cd4fb0c628460043593a3604051908152f35b015190508a80610ec8565b90601f1983169184600052896000209260005b818110610f8e575092600192859260e098966004989610610f75575b505050811b019055610edd565b015160001960f88460031b161c191690558a8080610f68565b92938b600181928786015181550195019301610f4c565b60405163b4fa3fb360e01b8152600490fd5b50426001600160401b0386161115610cb4565b346103f15760403660031901126103f1576020610893610fe86141e2565b600435615386565b60203660031901126103f1576004356001600160401b0381116103f15761103661102060209236906004016141f8565b906110296145e8565b6110316145ca565b614849565b60018055604051908152f35b346103f15760003660031901126103f15761105b61459e565b6000805481908190819047906001600160a01b0316828215611080575bf1156105ed57005b506108fc611078565b346103f15760203660031901126103f1576001600160a01b036110aa6141b6565b16600052600d60205260206001600160801b0360406000205416604051908152f35b346103f15760203660031901126103f1576004358015158091036103f15760207f1d3a2e9f214b18b25530f3e0058585b6ec740535caa59cd1770ccbfd90c397ac9161111661459e565b602a805460ff60a01b191660a083901b60ff60a01b16179055604051908152a1005b346103f15760403660031901126103f1576111516141b6565b6024359061115d61459e565b6001600160a01b031660008181526027602052604090205490919060ff16156104665780156111c25760207fceb40be0a58aa33916c199e469842b614ef313295573c15d82f85cc9d1a89d3291836000526028825280604060002055604051908152a2005b604051637841c2c960e11b8152600490fd5b346103f15760003660031901126103f1576040516111f18161408c565b60808091369037806040516112058161408c565b369037806040516112158161408c565b3690376040516021906000815b600190600482840110156112575790604060029286546001600160801b0381168252881c602082015201940191019092611222565b85846112628161408c565b60405160006023825b60016004818501101561129e57604060029284546001600160801b0381168252891c60208201520192019201919061126b565b505050509190916112ae8161408c565b6040519182906025946000925b600190600482860110156112f05790604060029289546001600160801b0381168252861c6020820152019701930192956112bb565b610180836113268961131b8a896113068461408c565b611313604051809761456d565b85019061456d565b61010083019061456d565bf35b346103f157602061135061133b366143ec565b9290816040519382858094519384920161416e565b8101601881520301902080548210156103f15760209161136f9161431f565b90546040519160031b1c8152f35b346103f15760203660031901126103f157600435600052601260205260206001600160801b0360406000205416604051908152f35b346103f15760203660031901126103f1576001600160a01b036113d36141b6565b16600052600f60205260206001600160401b0360406000205416604051908152f35b346103f15760603660031901126103f1576004356001600160401b0381116103f1576114259036906004016141f8565b604435151580604435036103f15733600052600a60205260026040600020015460ff8160481c16159081156117f1575b506117df578115610fa55760243561172a575b6004546001600160401b0360c01b60018260c01c0160c01b16809160018060c01b0316176004556040516114c7605c82602081019487898737878201903360601b6020830152426034830152605482015203603c8101845201826140a7565b519020916040519360a08501918583106001600160401b03841117610ad6576114f4926040523691614388565b835233602084015260243560408401526001600160401b0342166060840152608083015280600052600860205260406000209180519283516001600160401b038111610ad657611548816109be8454614036565b6020601f82116001146116be57819060039495966000926116b3575b50508160011b9160001990851b1c19161781555b6001810160018060a01b036020850151166001600160601b0360a01b8254161790556040830151600282015501906001600160401b0360608201511660ff60401b60808454930151151560401b169168ffffffffffffffffff19161717905533600052600c6020526115ee816040600020614823565b602435611695575b60443561162f575b60405160209133817f4e611b5a9758c78c82d7492e2f9bb1969b31be7f6463f3ffb3834d20310d1d4d600080a38152f35b601a5490600160401b821015610ad6576001820180601a5582101561167f57601a6000527f057c384a7d1c54f3a1b2e5e67b2617b8224fdfd1ea7234eea573a6ff665ff63e9091018190556115fe565b634e487b7160e01b600052603260045260246000fd5b60243560005260156020526116ae816040600020614823565b6115f6565b015190508680611564565b8260005260206000209560005b601f198416811061171257509582916003959697600194601f198116106116fa575b505050811b018155611578565b015160001983871b60f8161c191690558680806116ed565b828201518855600190970196602092830192016116cb565b60243560005260086020526001600160401b0360036040600020015416156117cd576024356000908152600860205260409020600101546001600160a01b03163314158061178b575b15611468575b60405163061cbdd360e51b8152600490fd5b50601160205260406000203360005260205260ff6040600020541660048110156117b757600211611773565b634e487b7160e01b600052602160045260246000fd5b60405163fc061e9f60e01b8152600490fd5b604051630fb532db60e11b8152600490fd5b90506001600160401b03429116111584611455565b346103f157611814366144a2565b906000526015602052604060002080548210156103f15760209161136f9161431f565b346103f15760803660031901126103f157611850614479565b6044359063ffffffff821682036103f1576064356001600160401b0381116103f1576118809036906004016141f8565b926004356000526006602052604060002060018060a01b036001820154163314159081611b53575b81611b43575b506117795760043560005260066020526001600160401b0360026040600020015460801c1615610afe57426001600160401b0384161115610fa5576005805467ffffffffffffffff1981166001600160401b039182166001019182161790915560408051600435602082019081523360601b6bffffffffffffffffffffffff19169282019290925242605482015260c09290921b6001600160c01b03191660748301529061195f81607c8101610d32565b519020926040518060c08101106001600160401b0360c083011117610ad65760c08101604090815260043582523360208084019182526001600160401b039490941682840190815260006060850181815263ffffffff97881660808701908152600160a08089018281528d86526009909a5296909320965187559351925190516001600160e01b031960e09190911b166001600160a01b0390931667ffffffffffffffff60a01b9190951b16939093171791830191909155929060020192511664ff0000000083549251151560201b169164ffffffffff19161717905582611a76575b60208260405190600435817fe858c17ec4703e144d651708aca8173d9af23b71bb0e3515c585dfe932c2eff9600080a38152f35b90601b60205260406000206001600160401b038411610ad65783611aa06020956109be8454614036565b6000601f8211600114611adf5781929394600092611ad4575b50508160011b916000199060031b1c19161790555b82611a42565b013590508580611ab9565b601f1982169483600052866000209160005b878110611b2c575083600195969710611b12575b505050811b019055611ace565b0135600019600384901b60f8161c19169055858080611b05565b909288600181928686013581550194019101611af1565b60029150015460f81c15856118ae565b9050601060205260406000203360005260205260ff6040600020541660048110156117b757600111906118a8565b346103f15760203660031901126103f15760043560048110156103f1576001600160801b03611bb160209261436d565b9190546040519260031b1c168152f35b346103f15760003660031901126103f15733600052601d6020526001600160801b03604060002054168015611c1a57600080808093338252601d602052604082206001600160801b031981541690553382f1156105ed57005b60405162461bcd60e51b815260206004820152600b60248201526a4e6f206561726e696e677360a81b6044820152606490fd5b346103f15760203660031901126103f157600435611c6961459e565b6127108111611ca3576020817fe4fa623f284b85c795e990f9cc4f6b5b0626280c3889f62851b8989a2609a47a92602b55604051908152a1005b60405163d027d9d760e01b8152600490fd5b346103f15760403660031901126103f157611cce6141e2565b600435600052601160205260406000209060018060a01b0316600052602052610bb160ff604060002054166040519182918261448f565b346103f15760203660031901126103f157611d1e6141b6565b611d2661459e565b6001600160a01b0390811660008181526027602052604090205490919060ff161561046657816000526027602052604060002060ff1981541690556028602052600060408120558160295491821614611da2575b507f4c910b69fe65a61f7531b9c5042b2329ca7179c77290aa7e2eb3afa3c8511fd3600080a2005b6001600160a01b03191660295581611d7a565b346103f15760803660031901126103f157611dce614469565b611dd6614534565b90611ddf61454a565b606435916001600160801b03831683036103f157611dfb61459e565b600360ff821611610fa557611e46611e1d92611e3d61001996611e1d8561436d565b90919082549060031b916001600160801b03809116831b921b1916179055565b611e1d83614337565b614352565b346103f15760203660031901126103f1576004356000908152601c6020526040902060018101546001600160a01b03163303610b1057600401805460ff19169055005b346103f15760203660031901126103f157611ea76141b6565b611eaf61459e565b6001600160a01b03168015610fa557602a80546001600160a81b0319168217600160a01b1790557f64395189a34ae5d780e1c8be6d937d798e5d7f5ade1c691495b59e9169e875d5600080a2005b60403660031901126103f157600435611f14614479565b6000828152600660205260409020600101546001600160a01b03163303610b10578160005260066020526001600160401b03908160026040600020015460801c1615610afe578260005260066020526001600160801b03928360026040600020015416670de0b6b3a7640000908560025460081c16620fffff6301e13380848888160204920160141c0202043410611ff95760005260136020526040600020918254918183160116906001600160401b0319161790556012602052604060002090815490611fe6813416828416614763565b6001600160801b03199092169116179055005b60405163cd1c886760e01b8152600490fd5b346103f15760203660031901126103f1576001600160801b0361202c61451e565b61203461459e565b166001600160801b03196003541617600355600080f35b346103f15760203660031901126103f157600435600052600660205261209f6040600020612078816140c8565b90600260018060a01b03600183015416910154604051938493610100808652850190614191565b9160208401526001600160801b03811660408401526001600160401b038160801c16606084015263ffffffff8160c01c16608084015261ffff8160e01c1660a084015260ff8160f01c16151560c084015260f81c151560e08301520390f35b346103f1576020806003193601126103f15760043561211b6145e8565b602a5460ff8160a01c16156105f9576040516323b872dd60e01b815233600482015230602482015260448101839052906001600160a01b039084908390606490829060009086165af19182156105ed5784926121f7575b50602a541691602460405180948193638fc7a25d60e01b835260048301525afa9182156105ed576000926121c8575b50506000808080938181156121bf575b3390f1156105ed5760018055005b506108fc6121b1565b90809250813d83116121f0575b6121df81836140a7565b810103126103f157516000806121a1565b503d6121d5565b61220d90833d85116105e6576105d781836140a7565b5084612172565b346103f15760203660031901126103f1576001600160a01b036122356141b6565b16600052601d60205260206001600160801b0360406000205416604051908152f35b346103f15760403660031901126103f1576122706141b6565b6024356001600160401b0381116103f1576020916122956122b29236906004016143ce565b6001600160a01b0390911660009081528380526040902090614443565b54604051908152f35b346103f15760203660031901126103f157600435600052600860205261231860406000206122e8816140c8565b9060ff60018060a01b0360018301541691600360028201549101549060405195869560a0875260a0870190614191565b93602086015260408501526001600160401b038116606085015260401c16151560808301520390f35b346103f15760003660031901126103f15760206001600160401b0360045460401c16604051908152f35b346103f15760003660031901126103f1576000546040516001600160a01b039091168152602090f35b346103f15760203660031901126103f157600435600052601c6020526040600020805490610bb160018060a01b036001830154169260028301549260ff60046123df600384016140c8565b92015416916040519585879660e01c9263ffffffff8260c01c16926001600160801b036001600160401b038460801c16931691896144b8565b346103f15760003660031901126103f15761243161459e565b6124396145ca565b600160ff1960025416176002557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586020604051338152a1005b346103f15760003660031901126103f157602a546040516001600160a01b039091168152602090f35b346103f15760003660031901126103f15760206001600160401b0360045416604051908152f35b346103f15760203660031901126103f1576124db61451e565b6124e361459e565b610100600160881b036002549160081b1690610100600160881b03191617600255600080f35b60603660031901126103f15761251d614469565b612525614479565b61252d6141cc565b906125366145e8565b600360ff841611610fa5576004546001600160401b03828116929181168310610fa55761256382866152a2565b3410611ff9577f12f97e9c312855c3f48ec2b207c7ed3789fdf1e5250bceda743d6b99db15e549936126eb936126c6926001926001600160a01b03908116908115159081612749575b81612730575b5061270a575b5033600052600a60205260406000209160028301908282549142828416116000146126f4575050815467ffffffffffffffff19811690841688018416178255505b82546001600160a01b031916331783556126676126158a61436d565b95906001600160801b03968791549060031b1c1694016001600160801b03199485825416178155856126468c614337565b90549060031b1c166001600160801b0382549181199060801b169116179055565b805460ff60401b191660408a901b60ff60401b16178155600160481b60ff60481b1982541617905533600052600f60205260406000209042166001600160401b0319825416179055600e602052604060002090815416905534166152d5565b6040805160ff90951685526001600160401b0390911660208501523393918291820190565b0390a260018055005b420116906001600160401b0319161781556125f9565b33600052601e6020526040600020906001600160601b0360a01b825416179055886125b8565b905033600052601e60205260406000205416158a6125b2565b3383141591506125ac565b346103f15760403660031901126103f15761276d6141b6565b6001600160a01b03166000908152600b60205260409020805460243591908210156103f15760209161136f9161431f565b346103f15760003660031901126103f1576127b761459e565b600080546001600160a01b0319811682556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b346103f15760203660031901126103f157600435600052601c60205260406000208054610bb160018060a01b0360018401541692600281015492612845600360ff60048501541693016140c8565b906040519585879660e01c9263ffffffff8260c01c16926001600160801b036001600160401b038460801c16931691896144b8565b346103f15760003660031901126103f15760206001600160801b0360035416604051908152f35b346103f1576020806003193601126103f157600435600081815260068352604090206001908101546001600160a01b03163303610b105781600052600683526001600160401b0360026040600020015460801c1615610afe5782908260005260068252604060002060078352604060002090600391600283820192019161292e85845460f81c93016140c8565b81546129398161460b565b9261294760405194856140a7565b81845260009081528881208985015b838310612cef57505050508661297991816040519382858094519384920161416e565b81016018815203019020856000905b612c6f575b5050846000905b612ba7575b5050612ac3575b33600052600d84526040600020908154906001600160801b0390818154168284161015600014612ab05754835492506129dd908216838316615206565b16906001600160801b0319161790555b83600052600683526000600260408220612a06816147da565b8285820155015583600052600783526040600020612a23816147da565b612a2e8382016147da565b612a3a600282016147da565b018054906000815581612a8b575b84601385826000525260406000206001600160401b031981541690557f88efefb1eaec3d3a0e08ed74bc99a3407d454b5da66112fed68b20d54837ccae600080a2005b60005282600020908101905b81811015612a485780612aaa84926147da565b01612a97565b50506001600160801b03191690556129ed565b6000835b612ad2575b506129a0565b8360199182549283821015612b9f5788612aeb836142e8565b905490881b1c14612b085750612b0291925061521f565b90612ac7565b915060001992838101908111612b8957612b33612b27612b4a926142e8565b905490881b1c926142e8565b819391549060031b91821b91600019901b19161790565b905580548015612b7357820191612b60836142e8565b9091825491871b1b191690555585612acc565b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b505050612acc565b8151811015612c6a579081612bc6612bc08894846151f2565b5161441d565b6000845b612be1575b5050612bda9061521f565b9091612994565b81929394915480821015612c5f578b612bfa838661431f565b9054908b1b1c14612c195750612c0f9061521f565b8194939291612bca565b9092949391506000198101908111612b895784612bda93612c51612b33612c44612c58958e9a61431f565b9054908d1b1c928461431f565b905561522e565b908a612bcf565b508194939250612bcf565b612999565b81548781831015612ce8575089612c86838561431f565b905490891b1c14612cb0575090612ca3879897969594939261521f565b9091929394959697612988565b9092916000198201918211612b89578793612c51612b33612cd4612ce1958561431f565b9054908b1b1c928461431f565b908861298d565b505061298d565b898b8192612d04979e9d9b9a999897856140c8565b8152019201920191909a9394959697999a612956565b346103f15760203660031901126103f1576001600160a01b03612d3b6141b6565b166000526027602052602060ff604060002054166040519015158152f35b346103f157612d67366144a2565b906000526016602052604060002080548210156103f15760209161136f9161431f565b346103f15760003660031901126103f1576029546040516001600160a01b039091168152602090f35b346103f15760403660031901126103f157612dcc6141e2565b600435600052601060205260406000209060018060a01b0316600052602052610bb160ff604060002054166040519182918261448f565b346103f15760203660031901126103f1576004356000526007602052612e646040600020610bb1612e33826140c8565b91612e72612e4f6002612e48600185016140c8565b93016140c8565b91604051958695606087526060870190614191565b908582036020870152614191565b908382036040850152614191565b346103f15760203660031901126103f157600435600052600960205260c0604060002060ff815491600260018201549101549060405193845260018060a01b03811660208501526001600160401b038160a01c16604085015260e01c606084015263ffffffff8116608084015260201c16151560a0820152f35b346103f15760003660031901126103f157602060ff600254166040519015158152f35b346103f1576020806003193601126103f1576004359081600052600681526001600160401b038060026040600020015460801c1615610afe57826000526006825260406000209260018060a01b0393846001820154163314159081613093575b81613083575b506117795761300a9361ffff916000526006845261305e6040600020936007865260406000209460028101549360018201541660138852613024836040600020541697613016612fd2826140c8565b9a612ff46002612fed612fe7600187016140c8565b986140c8565b94016140c8565b95604051809e819e610160808452830190614191565b92818403910152614191565b908a820360408c0152614191565b926001600160801b03861660608a01528560801c16608089015260ff8560f01c16151560a089015260c088015286820360e0880152614191565b9261010085015263ffffffff8160c01c1661012085015260e01c166101408301520390f35b60029150015460f81c1585612f83565b905060108452604060002033600052845260ff6040600020541660048110156117b75760011190612f7d565b346103f15760203660031901126103f1576001600160a01b036130e06141b6565b16600052600e60205260206001600160801b0360406000205416604051908152f35b346103f15760803660031901126103f15761311b614469565b613123614479565b9061312c6141cc565b6064356001600160a01b0381169291908381036103f15761314b6145e8565b83600052602760205260ff6040600020541615610466576131759061317086856152a2565b615386565b6040516323b872dd60e01b815233600482015230602482015260448101829052909490926020846064816000895af19384156105ed576131ba946131ec575b50615434565b6040519182527fc7e4cc89b0a980a194012a15142f99855680e1a060fc1955ce40af0800a7b1e860203393a360018055005b6132039060203d81116105e6576105d781836140a7565b50866131b4565b346103f15760203660031901126103f1576001600160a01b0361322b6141b6565b16600052601f6020526020604060002054604051908152f35b346103f1576020806003193601126103f157610100906001600160a01b0361326a6141b6565b16600052600a81526001600160401b036040600020600d83526001600160801b03908160406000205416936001820154600e82528360406000205416600b835260406000205492600c8152600260406000205495015495604051988952831690880152604087015260801c6060860152608085015260a084015260ff8160401c1660c08401521660e0820152f35b346103f15760203660031901126103f15760206001600160a01b038061331c6141b6565b16600052601e825260406000205416604051908152f35b346103f15760203660031901126103f1576004356019548110156103f15761136f6020916142e8565b346103f15760403660031901126103f1576133756141b6565b6024359061338161459e565b6001600160a01b0316908115610fa55780156111c25760207ff4c563a3ea86ff1f4275e8c207df0375a51963f2b831b7bf4da8be938d92876c9183600052602782526040600020600160ff198254161790556028825280604060002055604051908152a2005b346103f15760003660031901126103f15761340061459e565b60025460ff81161561343f5760ff19166002557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6020604051338152a1005b604051638dfc202b60e01b8152600490fd5b346103f15760203660031901126103f157600435600052601360205260206001600160401b0360406000205416604051908152f35b346103f15760603660031901126103f15761349f614469565b6134a7614479565b6134af6141cc565b6134b76145e8565b602a549160ff8360a01c16156105f9576134d96134d482866152a2565b615614565b6040516323b872dd60e01b81523360048201523060248201526044810182905290949093602090859060649082906000906001600160a01b03165af19384156105ed5761352a9461355c5750615434565b6040519081527f7e01bdfcb9e374847e0052332dc2e9561d204d892ab54122b8c8f79a3708aad460203392a260018055005b6135739060203d81116105e6576105d781836140a7565b50856131b4565b61358336614225565b61358b6145e8565b82600052602092601c845260406000209060ff600483015416156137ae576002820192835494426001600160401b038760801c1611156137ae578560e01c801515908161379a575b506137885760038401906135e78254614036565b1515928361375a575b505050611779576001600160801b038085163410611ff957825460005260068652613687600160026040600020613659613629826140c8565b895463ffffffff60c01b191660c09b8c1c63ffffffff908116909601909b1b63ffffffff60c01b169a909a178955565b01805463ffffffff60c01b19811660c091821c8416600101909316901b63ffffffff60c01b16919091179055565b600183015493548116936001600160a01b0316600085828115613750575b600092839283928392f1156105ed57610bb1947f0d59d45505505a9661a4d8f5a34cf177bb24da7babb871d6496a5da4e824461b92604092600052601d895282600020908154906136f884828416614763565b16906001600160801b03191617905581519033825288820152a2549160405193849333907f867558aef063b7f1f5ee4daa8d18b1811be91a77d9eb7890b94188892e11ff17600080a360018055808452830190614191565b6108fc92506136a5565b6137789293509061376c913691614388565b878151910120916140c8565b86815191012014158680806135f0565b6040516381a36e7f60e01b8152600490fd5b905063ffffffff8760c01c161015886135d3565b604051630614853960e21b8152600490fd5b346103f15760203660031901126103f15760043560048110156103f1576001600160801b03611bb1602092614352565b346103f15760403660031901126103f1576138096141b6565b6001600160a01b03166000908152600c60205260409020805460243591908210156103f15760209161136f9161431f565b346103f15760003660031901126103f157602060ff602a5460a01c166040519015158152f35b346103f157602061387361133b366143ec565b8101601781520301902080548210156103f15760209161136f9161431f565b346103f15760203660031901126103f1576001600160a01b036138b36141b6565b16600052601460205260206001600160801b0360406000205416604051908152f35b346103f15760003660031901126103f1576020602b54604051908152f35b346103f15760203660031901126103f1576001600160a01b036139146141b6565b1660005260286020526020604060002054604051908152f35b346103f15760203660031901126103f15760043560048110156103f1576001600160801b03611bb1602092614337565b346103f15760203660031901126103f157600435601a548110156103f157602090601a6000527f057c384a7d1c54f3a1b2e5e67b2617b8224fdfd1ea7234eea573a6ff665ff63e0154604051908152f35b346103f15760203660031901126103f1576001600160a01b036139cf6141b6565b16600052600b60205260406000208054906139e9826151c0565b906139f383615258565b926139fd81615258565b613a068261460b565b90613a1460405192836140a7565b828252601f199586613a258561460b565b01366020850137613a358461460b565b93613a4360405195866140a7565b80855287613a508261460b565b01366020870137613a608161460b565b97613a6e604051998a6140a7565b818952613a7a8261460b565b013660208a0137613a8a81615258565b9560005b828110613b9e5750505090613ac3613ad192613ab56040519860e08a5260e08a0190614258565b9088820360208a015261428c565b90868203604088015261428c565b84810360608601526020808351928381520192019060005b818110613b7f5750505083810360808501526020808351928381520192019060005b818110613b605750505082810360a08401526020808551928381520194019060005b818110613b48578480610bb1888783820360c085015261428c565b82511515865260209586019590920191600101613b2d565b82516001600160401b0316845260209384019390920191600101613b0b565b82516001600160801b0316845260209384019390920191600101613ae9565b613ba8818361431f565b90549060031b1c80600052600660205260406000206007602052604060002091613bd2848d6151f2565b52613bdc826140c8565b613be684886151f2565b52613bf183876151f2565b50613bfb816140c8565b613c0584896151f2565b52613c1083886151f2565b50600201546001600160801b038116613c29848a6151f2565b528060801c6001600160401b0316613c41848b6151f2565b52613c4c838d6151f2565b9060f81c15159052600101613c60906140c8565b613c6a828a6151f2565b52613c7581896151f2565b50613c7f9061521f565b613a8e565b346103f15760203660031901126103f1576004356001600160401b0381116103f157613cb660209136906004016141f8565b9190336000528180526040600020836040519485938437820190815203019020548015610afe57602090604051908152f35b346103f15760003660031901126103f157602060035460801c604051908152f35b346103f157613d1736614225565b918060005260209260098452604060002060028101549160ff83871c16156137ae5760018201948554946001600160401b039542878260a01c1611156137885763ffffffff8096168015159182613f53575b505061378857600052601b8752604060002091613d868354614036565b613f31575b5050505490816000526006855260406000209233600052600a865260406000209060ff600283015460481c16613e60575b505083546001600160e01b03811660e091821c600101831690911b6001600160e01b03191617909355613e4b92613e1f905b60028401805463ffffffff60c01b19811660c091821c8416600101909316901b63ffffffff60c01b16919091179055565b33907f867558aef063b7f1f5ee4daa8d18b1811be91a77d9eb7890b94188892e11ff17600080a36140c8565b90610bb1604051928284938452830190614191565b600f87939293528062278d0081604060002054160116421015613ef9575b50600e86526001600160801b0391826040600020541690836001613ea98260028a0154168095614763565b92015460801c911611613ee757336000908152600e88526040902080546001600160801b031981169085169092019093161790915580613dee613dbc565b604051635c31fe0f60e11b8152600490fd5b600e875260406000206001600160801b03198154169055600f875260406000209042166001600160401b031982541617905586613e7e565b613f409161376c913691614388565b8681519101200361177957858080613d8b565b60e01c101590508980613d69565b346103f15760403660031901126103f157613f7a6141b6565b613f8261459e565b6001600160a01b0390811660008181526027602052604090205490919060ff1615610466576000916044602092845416604051948593849263a9059cbb60e01b8452600484015260243560248401525af180156105ed57613fdf57005b6100199060203d81116105e6576105d781836140a7565b346103f15760203660031901126103f157600435600052601b602052610bb161402260406000206140c8565b604051918291602083526020830190614191565b90600182811c92168015614066575b602083101461405057565b634e487b7160e01b600052602260045260246000fd5b91607f1691614045565b61010081019081106001600160401b03821117610ad657604052565b608081019081106001600160401b03821117610ad657604052565b90601f801991011681019081106001600160401b03821117610ad657604052565b90604051918260008254926140dc84614036565b90818452600194858116908160001461414b5750600114614108575b5050614106925003836140a7565b565b9093915060005260209081600020936000915b818310614133575050614106935082010138806140f8565b8554888401850152948501948794509183019161411b565b91505061410694506020925060ff191682840152151560051b82010138806140f8565b60005b8381106141815750506000910152565b8181015183820152602001614171565b906020916141aa8151809281855285808601910161416e565b601f01601f1916010190565b600435906001600160a01b03821682036103f157565b604435906001600160a01b03821682036103f157565b602435906001600160a01b03821682036103f157565b9181601f840112156103f1578235916001600160401b0383116103f157602083818601950101116103f157565b9060406003198301126103f15760043591602435906001600160401b0382116103f157614254916004016141f8565b9091565b90815180825260208080930193019160005b828110614278575050505090565b83518552938101939281019260010161426a565b908082519081815260208091019281808460051b8301019501936000915b8483106142ba5750505050505090565b90919293949584806142d8600193601f198682030187528a51614191565b98019301930191949392906142aa565b60195481101561167f5760196000527f944998273e477b495144fb8794c914197f3ccb46be2900f4698fd0ef743c96950190600090565b805482101561167f5760005260206000200190600090565b90600482101561167f5760108260011c6023019260041b1690565b90600482101561167f5760108260011c6025019260041b1690565b90600482101561167f5760108260011c6021019260041b1690565b9291926001600160401b038211610ad657604051916143b1601f8201601f1916602001846140a7565b8294818452818301116103f1578281602093846000960137010152565b9080601f830112156103f1578160206143e993359101614388565b90565b60406003198201126103f157600435906001600160401b0382116103f157614416916004016143ce565b9060243590565b602061443691816040519382858094519384920161416e565b8101601781520301902090565b60209061445d92826040519483868095519384920161416e565b82019081520301902090565b6004359060ff821682036103f157565b602435906001600160401b03821682036103f157565b9190602083019260048210156117b75752565b60409060031901126103f1576004359060243590565b96936001600160801b03614516969460e098946001600160401b03949c9b9c8b5260018060a01b031660208b015216604089015216606087015263ffffffff80921660808701521660a08501526101008060c0860152840190614191565b931515910152565b600435906001600160801b03821682036103f157565b602435906001600160801b03821682036103f157565b604435906001600160801b03821682036103f157565b359081151582036103f157565b6000915b6004831061457e57505050565b6001906001600160801b0383511681526020809101920192019190614571565b6000546001600160a01b031633036145b257565b60405163118cdaa760e01b8152336004820152602490fd5b60ff600254166145d657565b60405163d93c066560e01b8152600490fd5b6002600154146145f9576002600155565b604051633ee5aeb560e01b8152600490fd5b6001600160401b038111610ad65760051b60200190565b610140818303126103f1576001600160401b039080358281116103f1578361464b9183016143ce565b93602093848301358481116103f157816146669185016143ce565b9460408401358581116103f1578261467f9186016143ce565b9460608501356001600160801b03811681036103f1579460808101358281116103f157846146ae9183016143ce565b946146bb60a08301614560565b946146c860c08401614560565b9460e08401358581116103f15784019180601f840112156103f1578235926146ef8461460b565b936146fd60405195866140a7565b808552838086019160051b830101928084116103f157848301915b84831061473e575050505050509261012061010084013593013590811681036103f15790565b82358a81116103f1578691614758848480948901016143ce565b815201920191614718565b9190916001600160801b0380809416911601918211612b8957565b818110614789575050565b6000815560010161477e565b9190601f81116147a457505050565b614106926000526020600020906020601f840160051c830193106147d0575b601f0160051c019061477e565b90915081906147c3565b6147e48154614036565b90816147ee575050565b81601f60009311600114614800575055565b90808391825261481f601f60208420940160051c84016001850161477e565b5555565b805490600160401b821015610ad65781612b339160016148459401815561431f565b9055565b61485591810190614622565b969793989092959194885115610fa5576001600160801b0383161580156151a9575b615197576004546001600160401b0381166001600160401b038a1610610fa55733600052600a6020526040600020600281015460ff8160481c1615908115615182575b506117df5733600052600d6020526001600160801b038060016148e4888360406000205416614763565b93015416911611610aec57670de0b6b3a76400006001600160801b0360025460081c166301e13380826001600160401b038d16020490620fffff6001600160801b0388160160141c0202043410611ff95789906001600160401b0360801b60016001600160401b038360801c160160801b16906001600160401b0360801b191617806004556149bd605c60405180936020614988818401978881519384920161416e565b8201903360601b60208301524260348301526001600160401b0360c01b9060401b16605482015203603c8101845201826140a7565b5190209933600052602080528a6149d860406000208c614443565b55604051906149e682614070565b8a82523360208301526001600160801b03851660408301526001600160401b034216606083015260006080830152600160a0830152151560c082015287151560e08201528a600052600660205260406000209080518051906001600160401b038211610ad657614a6082614a5a8654614036565b86614795565b602090601f83116001146151155760029392916000918361510a575b50508160011b916000199060031b1c19161783555b60208101516001840180546001600160a01b039092166001600160a01b0319909216919091179055604080820151606083015160808085015160a086015160c08088015160e0988901519290981b61ffff60e01b1692901b63ffffffff60c01b1667ffffffffffffffff60801b94841b949094166001600160801b0390951694909417929092179190911793151560f01b60ff60f01b169390931790151560f81b6001600160f81b031916179290930191909155905192906001600160401b0390840190811190841117610ad657608083016040528252846020830152604082015284606082015288600052600760205260406000209080518051906001600160401b038211610ad6578190614bb182614bab8754614036565b87614795565b602090601f831160011461509e57600092615093575b50508160011b916000199060031b1c19161782555b60208101518051906001600160401b038211610ad6578190614c0e82614c056001880154614036565b60018801614795565b602090601f831160011461502157600092615016575b50508160011b916000199060031b1c19161760018301555b60408101518051906001600160401b038211610ad657614c6c82614c636002870154614036565b60028701614795565b602090601f8311600114614fa357606093929160009183614f98575b50508160011b916000199060031b1c19161760028401555b0151805190600160401b8211610ad6576003830154826003850155808310614f65575b5090600360208c969594930192016000526020600020916000905b828210614e765750505050614d5f93614d509260209233600052600b8452614d0a866040600020614823565b33600052600d84526040600020906001600160801b038254918183160116906001600160801b03191617905580614e5b575b50816040519382858094519384920161416e565b81016018815203019020614823565b80519060005b828110614e3c57505050614e0c575b614dcd906001600160801b033416908460005260126020526040600020826001600160801b031982541617905560136020526001600160401b0380604060002092164201166001600160401b03198254161790556152d5565b817f7237b089d1a252ec5312d4f64b1378a99d12760dfcaa22429ba0bd7c31d3fc886040516020815280614e0633956020830190614191565b0390a390565b60195490600160401b821015610ad65783614e33612b33846001614dcd96016019556142e8565b90559050614d74565b80614e5588614e50612bc0600195876151f2565b614823565b01614d65565b60005260168252614e70846040600020614823565b38614d3c565b8091929394959650518051906001600160401b038211610ad657614ea482614e9e8854614036565b88614795565b602090601f8311600114614ef5579282600194936020938695600092614eea575b5050600019600383901b1c191690841b1787555b01940191018b959493929192614cde565b015190503880614ec5565b908660005260206000209160005b601f1985168110614f4d575083602093600196938796938794601f19811610614f34575b505050811b018755614ed9565b015160001960f88460031b161c19169055388080614f27565b91926020600181928685015181550194019201614f03565b600384016000526020600020908382015b8183018110614f86575050614cc3565b80614f926001926147da565b01614f76565b015190503880614c88565b906002850160005260206000209160005b601f1985168110614ffe575091839160019360609695601f19811610614fe5575b505050811b016002840155614ca0565b015160001960f88460031b161c19169055388080614fd5565b91926020600181928685015181550194019201614fb4565b015190503880614c24565b9250600185016000526020600020906000935b601f1984168510615078576001945083601f1981161061505f575b505050811b016001830155614c3c565b015160001960f88460031b161c1916905538808061504f565b81810151835560209485019460019093019290910190615034565b015190503880614bc7565b9250846000526020600020906000935b601f19841685106150ef576001945083601f198116106150d6575b505050811b018255614bdc565b015160001960f88460031b161c191690553880806150c9565b818101518355602094850194600190930192909101906150ae565b015190503880614a7c565b908460005260206000209160005b601f198516811061516a575091839160019360029695601f19811610615151575b505050811b018355614a91565b015160001960f88460031b161c19169055388080615144565b91926020600181928685015181550194019201615123565b90506001600160401b034291161115386148ba565b604051637ff0f53960e01b8152600490fd5b5060035460801c6001600160801b03841611614877565b906151ca8261460b565b6151d760405191826140a7565b82815280926151e8601f199161460b565b0190602036910137565b805182101561167f5760209160051b010190565b6001600160801b039182169082160391908211612b8957565b6000198114612b895760010190565b8054908115612b735760001991820191615248838361431f565b909182549160031b1b1916905555565b906152628261460b565b61526f60405191826140a7565b8281528092615280601f199161460b565b019060005b82811061529157505050565b806060602080938501015201615285565b6001600160401b039162278d0062263b806152c46001600160801b0394614352565b959054931601049260031b1c160290565b336000908152601e60205260408120546001600160a01b031691826152f957505050565b6127106001600160801b0380926001600160401b0360045460401c160216041690828152601f6020526040812082815401905580828482821561537d575b839283928392f115615371575060207fa81d02e535011fd802e58bd5357645a72a434aa58d1d854c19616ea74ca58d4091604051908152a2565b604051903d90823e3d90fd5b506108fc615337565b6001600160a01b039091166000818152602760205260408120549092919060ff16156104665782526028602052604082205491670de0b6b3a764000091828102928184041490151715615408578282018092116154085760001982019182116154085782156153f457500490565b634e487b7160e01b81526012600452602490fd5b634e487b7160e01b81526011600452602490fd5b908160209103126103f1575180151581036103f15790565b91600360ff841611610fa5576001600160401b03918260045416838216908110610fa5577f12f97e9c312855c3f48ec2b207c7ed3789fdf1e5250bceda743d6b99db15e549936155af936001600160a01b03908116908115159081615609575b816155f0575b506155ca575b5033600052600a60205260406000209160028301908282549142828416116000146155b4575050815467ffffffffffffffff19811690841686018416178255505b82546001600160a01b0319163317835561553060016154ff8961436d565b91906001600160801b03928391549060031b1c169501906001600160801b031995868354161782556126468a614337565b805460ff60401b1916604088901b60ff60401b16178155600160481b60ff60481b1982541617905533600052600f60205260406000209042166001600160401b0319825416179055600e60205260406000209081541690556040519182913395839092916001600160401b0360209160ff604085019616845216910152565b0390a2565b420116906001600160401b0319161781556154e1565b33600052601e6020526040600020906001600160601b0360a01b825416179055386154a0565b905033600052601e60205260406000205416153861549a565b338314159150615494565b602a549060ff8260a01c16156105f957602b5461271090810391818311612b8957828102928184041490151715612b895760405163c2507ac160e01b81529104600482015290602090829060249082906001600160a01b03165afa9081156105ed57600091615681575090565b906020823d82116156aa575b8161569a602093836140a7565b810103126156a757505190565b80fd5b3d915061568d56fea2646970667358221220f6312069ba5a759149863b075f1cca45f96e29e5b23523edd88afae9e539dff864736f6c63430008140033",
  "devdoc": {
    "author": "GDrive Team",
    "details": "A comprehensive, gas-efficient decentralized storage solution",
    "errors": {
      "EnforcedPause()": [
        {
          "details": "The operation failed because the contract is paused."
        }
      ],
      "ExpectedPause()": [
        {
          "details": "The operation failed because the contract is not paused."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "events": {
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "accessFileViaLink(bytes32,string)": {
        "details": "Access file through share link (gas optimized)"
      },
      "addPaymentToken(address,uint256)": {
        "details": "Add a new supported payment token",
        "params": {
          "price": "Price in wei per token",
          "token": "Address of the ERC20 token"
        }
      },
      "calculateGDVAmount(uint256)": {
        "details": "Calculate GDV amount needed for payment with discount",
        "params": {
          "ethAmount": "Amount in wei"
        },
        "returns": {
          "gdvAmount": "Amount of GDV tokens needed"
        }
      },
      "calculateTokenAmount(uint256,address)": {
        "details": "Calculate token amount needed for payment",
        "params": {
          "ethAmount": "Amount in wei",
          "token": "Address of the payment token"
        },
        "returns": {
          "tokenAmount": "Amount of tokens needed"
        }
      },
      "convertGDVToEth(uint256)": {
        "details": "Convert GDV tokens to ETH",
        "params": {
          "gdvAmount": "Amount of GDV tokens to convert"
        }
      },
      "createFolder(string,bytes32,bool)": {
        "details": "Create a new folder (gas optimized)"
      },
      "createShareLink(bytes32,uint64,uint32,string)": {
        "details": "Create a shareable link for a file"
      },
      "getFileDetails(bytes32)": {
        "details": "Get file details with access control"
      },
      "getSubscriptionTiers()": {
        "details": "Get subscription pricing"
      },
      "getUserFiles(address)": {
        "details": "Get user's files for dashboard display"
      },
      "getUserStats(address)": {
        "details": "Get user's storage statistics"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "purchaseSubscription(uint8,uint64,address)": {
        "details": "Purchase or upgrade subscription (gas optimized)"
      },
      "purchaseSubscriptionWithGDV(uint8,uint64,address)": {
        "details": "Purchase subscription with GDV payment",
        "params": {
          "duration": "Duration in seconds",
          "referrer": "Referrer address",
          "tier": "Subscription tier"
        }
      },
      "purchaseSubscriptionWithToken(uint8,uint64,address,address)": {
        "details": "Purchase subscription with token payment",
        "params": {
          "duration": "Duration in seconds",
          "referrer": "Referrer address",
          "tier": "Subscription tier",
          "token": "Address of the payment token"
        }
      },
      "removePaymentToken(address)": {
        "details": "Remove a supported payment token",
        "params": {
          "token": "Address of the ERC20 token"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setDefaultPaymentToken(address)": {
        "details": "Set default payment token",
        "params": {
          "token": "Address of the ERC20 token"
        }
      },
      "setGDVEnabled(bool)": {
        "details": "Enable/disable GDV payments",
        "params": {
          "enabled": "Whether GDV payments should be enabled"
        }
      },
      "setGDVToken(address)": {
        "details": "Set GDV token address",
        "params": {
          "token": "Address of the GDV token contract"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateGDVDiscount(uint256)": {
        "details": "Update GDV discount percentage",
        "params": {
          "discount": "New discount percentage in basis points"
        }
      },
      "updateTokenPrice(address,uint256)": {
        "details": "Update token price",
        "params": {
          "newPrice": "New price in wei per token",
          "token": "Address of the ERC20 token"
        }
      },
      "uploadFileWithGDV(bytes)": {
        "details": "Upload file with GDV payment",
        "params": {
          "params": "Encoded parameters"
        }
      },
      "uploadFileWithToken(bytes,address)": {
        "details": "Upload file with token payment",
        "params": {
          "params": "Encoded parameters",
          "token": "Address of the payment token"
        }
      },
      "withdrawTokens(address,uint256)": {
        "details": "Withdraw tokens from contract",
        "params": {
          "amount": "Amount to withdraw",
          "token": "Address of the token to withdraw"
        }
      }
    },
    "title": "GDrive 2.0 - Gas Optimized Decentralized Storage Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/GDrive.sol:GDrive",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1061,
        "contract": "contracts/GDrive.sol:GDrive",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 942,
        "contract": "contracts/GDrive.sol:GDrive",
        "label": "_paused",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 1517,
        "contract": "contracts/GDrive.sol:GDrive",
        "label": "storageRatePerMBPerYear",
        "offset": 1,
        "slot": "2",
        "type": "t_uint128"
      },
      {
        "astId": 1520,
        "contract": "contracts/GDrive.sol:GDrive",
        "label": "bandwidthRatePerGB",
        "offset": 0,
        "slot": "3",
        "type": "t_uint128"
      },
      {
        "astId": 1529,
        "contract": "contracts/GDrive.sol:GDrive",
        "label": "maxFileSize",
        "offset": 16,
        "slot": "3",
        "type": "t_uint128"
      },
      {
        "astId": 1532,
        "contract": "contracts/GDrive.sol:GDrive",
        "label": "minimumStoragePeriod",
        "offset": 0,
        "slot": "4",
        "type": "t_uint64"
      },
      {
        "astId": 1535,
        "contract": "contracts/GDrive.sol:GDrive",
        "label": "referralRewardPercentage",
        "offset": 8,
        "slot": "4",
        "type": "t_uint64"
      },
      {
        "astId": 1537,
        "contract": "contracts/GDrive.sol:GDrive",
        "label": "_fileIdCounter",
        "offset": 16,
        "slot": "4",
        "type": "t_uint64"
      },
      {
        "astId": 1539,
        "contract": "contracts/GDrive.sol:GDrive",
        "label": "_folderIdCounter",
        "offset": 24,
        "slot": "4",
        "type": "t_uint64"
      },
      {
        "astId": 1541,
        "contract": "contracts/GDrive.sol:GDrive",
        "label": "_shareLinkIdCounter",
        "offset": 0,
        "slot": "5",
        "type": "t_uint64"
      },
      {
        "astId": 1543,
        "contract": "contracts/GDrive.sol:GDrive",
        "label": "_reserved",
        "offset": 8,
        "slot": "5",
        "type": "t_uint64"
      },
      {
        "astId": 1548,
        "contract": "contracts/GDrive.sol:GDrive",
        "label": "files",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_struct(File)1427_storage)"
      },
      {
        "astId": 1553,
        "contract": "contracts/GDrive.sol:GDrive",
        "label": "fileMetadata",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_bytes32,t_struct(FileMetadata)1454_storage)"
      },
      {
        "astId": 1558,
        "contract": "contracts/GDrive.sol:GDrive",
        "label": "folders",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_bytes32,t_struct(Folder)1465_storage)"
      },
      {
        "astId": 1563,
        "contract": "contracts/GDrive.sol:GDrive",
        "label": "shareLinks",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_bytes32,t_struct(ShareLink)1478_storage)"
      },
      {
        "astId": 1568,
        "contract": "contracts/GDrive.sol:GDrive",
        "label": "subscriptions",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_struct(Subscription)1491_storage)"
      },
      {
        "astId": 1573,
        "contract": "contracts/GDrive.sol:GDrive",
        "label": "userFiles",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)"
      },
      {
        "astId": 1578,
        "contract": "contracts/GDrive.sol:GDrive",
        "label": "userFolders",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_array(t_bytes32)dyn_storage)"
      },
      {
        "astId": 1582,
        "contract": "contracts/GDrive.sol:GDrive",
        "label": "userStorageUsed",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_uint128)"
      },
      {
        "astId": 1586,
        "contract": "contracts/GDrive.sol:GDrive",
        "label": "userBandwidthUsed",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_uint128)"
      },
      {
        "astId": 1590,
        "contract": "contracts/GDrive.sol:GDrive",
        "label": "lastBandwidthReset",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_uint64)"
      },
      {
        "astId": 1597,
        "contract": "contracts/GDrive.sol:GDrive",
        "label": "filePermissions",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_bytes32,t_mapping(t_address,t_enum(Permission)1496))"
      },
      {
        "astId": 1604,
        "contract": "contracts/GDrive.sol:GDrive",
        "label": "folderPermissions",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_bytes32,t_mapping(t_address,t_enum(Permission)1496))"
      },
      {
        "astId": 1608,
        "contract": "contracts/GDrive.sol:GDrive",
        "label": "filePayments",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_bytes32,t_uint128)"
      },
      {
        "astId": 1612,
        "contract": "contracts/GDrive.sol:GDrive",
        "label": "fileExpiryDates",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_bytes32,t_uint64)"
      },
      {
        "astId": 1616,
        "contract": "contracts/GDrive.sol:GDrive",
        "label": "userBalances",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_address,t_uint128)"
      },
      {
        "astId": 1621,
        "contract": "contracts/GDrive.sol:GDrive",
        "label": "folderSubFolders",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_bytes32,t_array(t_bytes32)dyn_storage)"
      },
      {
        "astId": 1626,
        "contract": "contracts/GDrive.sol:GDrive",
        "label": "folderFiles",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_bytes32,t_array(t_bytes32)dyn_storage)"
      },
      {
        "astId": 1631,
        "contract": "contracts/GDrive.sol:GDrive",
        "label": "taggedFiles",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_string_memory_ptr,t_array(t_bytes32)dyn_storage)"
      },
      {
        "astId": 1636,
        "contract": "contracts/GDrive.sol:GDrive",
        "label": "fileTypeIndex",
        "offset": 0,
        "slot": "24",
        "type": "t_mapping(t_string_memory_ptr,t_array(t_bytes32)dyn_storage)"
      },
      {
        "astId": 1639,
        "contract": "contracts/GDrive.sol:GDrive",
        "label": "publicFiles",
        "offset": 0,
        "slot": "25",
        "type": "t_array(t_bytes32)dyn_storage"
      },
      {
        "astId": 1642,
        "contract": "contracts/GDrive.sol:GDrive",
        "label": "publicFolders",
        "offset": 0,
        "slot": "26",
        "type": "t_array(t_bytes32)dyn_storage"
      },
      {
        "astId": 1646,
        "contract": "contracts/GDrive.sol:GDrive",
        "label": "shareLinkPasswords",
        "offset": 0,
        "slot": "27",
        "type": "t_mapping(t_bytes32,t_string_storage)"
      },
      {
        "astId": 1651,
        "contract": "contracts/GDrive.sol:GDrive",
        "label": "PaidShareLinks",
        "offset": 0,
        "slot": "28",
        "type": "t_mapping(t_bytes32,t_struct(PaidShareLink)1444_storage)"
      },
      {
        "astId": 1655,
        "contract": "contracts/GDrive.sol:GDrive",
        "label": "earnedRevenue",
        "offset": 0,
        "slot": "29",
        "type": "t_mapping(t_address,t_uint128)"
      },
      {
        "astId": 1659,
        "contract": "contracts/GDrive.sol:GDrive",
        "label": "referrers",
        "offset": 0,
        "slot": "30",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 1663,
        "contract": "contracts/GDrive.sol:GDrive",
        "label": "referralRewards",
        "offset": 0,
        "slot": "31",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1669,
        "contract": "contracts/GDrive.sol:GDrive",
        "label": "userCidToFileId",
        "offset": 0,
        "slot": "32",
        "type": "t_mapping(t_address,t_mapping(t_string_memory_ptr,t_bytes32))"
      },
      {
        "astId": 1673,
        "contract": "contracts/GDrive.sol:GDrive",
        "label": "tierStorageLimits",
        "offset": 0,
        "slot": "33",
        "type": "t_array(t_uint128)4_storage"
      },
      {
        "astId": 1677,
        "contract": "contracts/GDrive.sol:GDrive",
        "label": "tierBandwidthLimits",
        "offset": 0,
        "slot": "35",
        "type": "t_array(t_uint128)4_storage"
      },
      {
        "astId": 1681,
        "contract": "contracts/GDrive.sol:GDrive",
        "label": "tierPrices",
        "offset": 0,
        "slot": "37",
        "type": "t_array(t_uint128)4_storage"
      },
      {
        "astId": 1685,
        "contract": "contracts/GDrive.sol:GDrive",
        "label": "supportedTokens",
        "offset": 0,
        "slot": "39",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1689,
        "contract": "contracts/GDrive.sol:GDrive",
        "label": "tokenPrices",
        "offset": 0,
        "slot": "40",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1691,
        "contract": "contracts/GDrive.sol:GDrive",
        "label": "defaultPaymentToken",
        "offset": 0,
        "slot": "41",
        "type": "t_address"
      },
      {
        "astId": 1802,
        "contract": "contracts/GDrive.sol:GDrive",
        "label": "gdvToken",
        "offset": 0,
        "slot": "42",
        "type": "t_contract(IGDVToken)1403"
      },
      {
        "astId": 1804,
        "contract": "contracts/GDrive.sol:GDrive",
        "label": "gdvEnabled",
        "offset": 20,
        "slot": "42",
        "type": "t_bool"
      },
      {
        "astId": 1806,
        "contract": "contracts/GDrive.sol:GDrive",
        "label": "gdvDiscount",
        "offset": 0,
        "slot": "43",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint128)4_storage": {
        "base": "t_uint128",
        "encoding": "inplace",
        "label": "uint128[4]",
        "numberOfBytes": "64"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IGDVToken)1403": {
        "encoding": "inplace",
        "label": "contract IGDVToken",
        "numberOfBytes": "20"
      },
      "t_enum(Permission)1496": {
        "encoding": "inplace",
        "label": "enum GDrive.Permission",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_array(t_bytes32)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes32[])",
        "numberOfBytes": "32",
        "value": "t_array(t_bytes32)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_enum(Permission)1496)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => enum GDrive.Permission)",
        "numberOfBytes": "32",
        "value": "t_enum(Permission)1496"
      },
      "t_mapping(t_address,t_mapping(t_string_memory_ptr,t_bytes32))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(string => bytes32))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_string_memory_ptr,t_bytes32)"
      },
      "t_mapping(t_address,t_struct(Subscription)1491_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct GDrive.Subscription)",
        "numberOfBytes": "32",
        "value": "t_struct(Subscription)1491_storage"
      },
      "t_mapping(t_address,t_uint128)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint128)",
        "numberOfBytes": "32",
        "value": "t_uint128"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_address,t_uint64)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint64)",
        "numberOfBytes": "32",
        "value": "t_uint64"
      },
      "t_mapping(t_bytes32,t_array(t_bytes32)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32[])",
        "numberOfBytes": "32",
        "value": "t_array(t_bytes32)dyn_storage"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_enum(Permission)1496))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => enum GDrive.Permission))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_enum(Permission)1496)"
      },
      "t_mapping(t_bytes32,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_bytes32,t_struct(File)1427_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct GDrive.File)",
        "numberOfBytes": "32",
        "value": "t_struct(File)1427_storage"
      },
      "t_mapping(t_bytes32,t_struct(FileMetadata)1454_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct GDrive.FileMetadata)",
        "numberOfBytes": "32",
        "value": "t_struct(FileMetadata)1454_storage"
      },
      "t_mapping(t_bytes32,t_struct(Folder)1465_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct GDrive.Folder)",
        "numberOfBytes": "32",
        "value": "t_struct(Folder)1465_storage"
      },
      "t_mapping(t_bytes32,t_struct(PaidShareLink)1444_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct GDrive.PaidShareLink)",
        "numberOfBytes": "32",
        "value": "t_struct(PaidShareLink)1444_storage"
      },
      "t_mapping(t_bytes32,t_struct(ShareLink)1478_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct GDrive.ShareLink)",
        "numberOfBytes": "32",
        "value": "t_struct(ShareLink)1478_storage"
      },
      "t_mapping(t_bytes32,t_uint128)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint128)",
        "numberOfBytes": "32",
        "value": "t_uint128"
      },
      "t_mapping(t_bytes32,t_uint64)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint64)",
        "numberOfBytes": "32",
        "value": "t_uint64"
      },
      "t_mapping(t_string_memory_ptr,t_array(t_bytes32)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => bytes32[])",
        "numberOfBytes": "32",
        "value": "t_array(t_bytes32)dyn_storage"
      },
      "t_mapping(t_string_memory_ptr,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(File)1427_storage": {
        "encoding": "inplace",
        "label": "struct GDrive.File",
        "members": [
          {
            "astId": 1412,
            "contract": "contracts/GDrive.sol:GDrive",
            "label": "cid",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 1414,
            "contract": "contracts/GDrive.sol:GDrive",
            "label": "owner",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 1416,
            "contract": "contracts/GDrive.sol:GDrive",
            "label": "size",
            "offset": 0,
            "slot": "2",
            "type": "t_uint128"
          },
          {
            "astId": 1418,
            "contract": "contracts/GDrive.sol:GDrive",
            "label": "uploadDate",
            "offset": 16,
            "slot": "2",
            "type": "t_uint64"
          },
          {
            "astId": 1420,
            "contract": "contracts/GDrive.sol:GDrive",
            "label": "downloadCount",
            "offset": 24,
            "slot": "2",
            "type": "t_uint32"
          },
          {
            "astId": 1422,
            "contract": "contracts/GDrive.sol:GDrive",
            "label": "version",
            "offset": 28,
            "slot": "2",
            "type": "t_uint16"
          },
          {
            "astId": 1424,
            "contract": "contracts/GDrive.sol:GDrive",
            "label": "isEncrypted",
            "offset": 30,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 1426,
            "contract": "contracts/GDrive.sol:GDrive",
            "label": "isPublic",
            "offset": 31,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(FileMetadata)1454_storage": {
        "encoding": "inplace",
        "label": "struct GDrive.FileMetadata",
        "members": [
          {
            "astId": 1446,
            "contract": "contracts/GDrive.sol:GDrive",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 1448,
            "contract": "contracts/GDrive.sol:GDrive",
            "label": "fileType",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 1450,
            "contract": "contracts/GDrive.sol:GDrive",
            "label": "description",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 1453,
            "contract": "contracts/GDrive.sol:GDrive",
            "label": "tags",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_string_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Folder)1465_storage": {
        "encoding": "inplace",
        "label": "struct GDrive.Folder",
        "members": [
          {
            "astId": 1456,
            "contract": "contracts/GDrive.sol:GDrive",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 1458,
            "contract": "contracts/GDrive.sol:GDrive",
            "label": "owner",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 1460,
            "contract": "contracts/GDrive.sol:GDrive",
            "label": "parentFolderId",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          },
          {
            "astId": 1462,
            "contract": "contracts/GDrive.sol:GDrive",
            "label": "createdDate",
            "offset": 0,
            "slot": "3",
            "type": "t_uint64"
          },
          {
            "astId": 1464,
            "contract": "contracts/GDrive.sol:GDrive",
            "label": "isPublic",
            "offset": 8,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(PaidShareLink)1444_storage": {
        "encoding": "inplace",
        "label": "struct GDrive.PaidShareLink",
        "members": [
          {
            "astId": 1429,
            "contract": "contracts/GDrive.sol:GDrive",
            "label": "fileId",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 1431,
            "contract": "contracts/GDrive.sol:GDrive",
            "label": "creator",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 1433,
            "contract": "contracts/GDrive.sol:GDrive",
            "label": "pricePerAccess",
            "offset": 0,
            "slot": "2",
            "type": "t_uint128"
          },
          {
            "astId": 1435,
            "contract": "contracts/GDrive.sol:GDrive",
            "label": "expiryDate",
            "offset": 16,
            "slot": "2",
            "type": "t_uint64"
          },
          {
            "astId": 1437,
            "contract": "contracts/GDrive.sol:GDrive",
            "label": "accessCount",
            "offset": 24,
            "slot": "2",
            "type": "t_uint32"
          },
          {
            "astId": 1439,
            "contract": "contracts/GDrive.sol:GDrive",
            "label": "maxAccess",
            "offset": 28,
            "slot": "2",
            "type": "t_uint32"
          },
          {
            "astId": 1441,
            "contract": "contracts/GDrive.sol:GDrive",
            "label": "password",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 1443,
            "contract": "contracts/GDrive.sol:GDrive",
            "label": "isActive",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(ShareLink)1478_storage": {
        "encoding": "inplace",
        "label": "struct GDrive.ShareLink",
        "members": [
          {
            "astId": 1467,
            "contract": "contracts/GDrive.sol:GDrive",
            "label": "fileId",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 1469,
            "contract": "contracts/GDrive.sol:GDrive",
            "label": "creator",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 1471,
            "contract": "contracts/GDrive.sol:GDrive",
            "label": "expiryDate",
            "offset": 20,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 1473,
            "contract": "contracts/GDrive.sol:GDrive",
            "label": "accessCount",
            "offset": 28,
            "slot": "1",
            "type": "t_uint32"
          },
          {
            "astId": 1475,
            "contract": "contracts/GDrive.sol:GDrive",
            "label": "maxAccess",
            "offset": 0,
            "slot": "2",
            "type": "t_uint32"
          },
          {
            "astId": 1477,
            "contract": "contracts/GDrive.sol:GDrive",
            "label": "isActive",
            "offset": 4,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Subscription)1491_storage": {
        "encoding": "inplace",
        "label": "struct GDrive.Subscription",
        "members": [
          {
            "astId": 1480,
            "contract": "contracts/GDrive.sol:GDrive",
            "label": "user",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1482,
            "contract": "contracts/GDrive.sol:GDrive",
            "label": "storageLimit",
            "offset": 0,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 1484,
            "contract": "contracts/GDrive.sol:GDrive",
            "label": "bandwidthLimit",
            "offset": 16,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 1486,
            "contract": "contracts/GDrive.sol:GDrive",
            "label": "expiryDate",
            "offset": 0,
            "slot": "2",
            "type": "t_uint64"
          },
          {
            "astId": 1488,
            "contract": "contracts/GDrive.sol:GDrive",
            "label": "tier",
            "offset": 8,
            "slot": "2",
            "type": "t_uint8"
          },
          {
            "astId": 1490,
            "contract": "contracts/GDrive.sol:GDrive",
            "label": "isActive",
            "offset": 9,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}